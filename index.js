// Generated by psc-bundle 0.8.0.0
var PS = { };
(function(exports) {
  /* global exports */
  "use strict";

  // module Prelude

  //- Functor --------------------------------------------------------------------

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };

  //- Bind -----------------------------------------------------------------------

  exports.arrayBind = function (arr) {
    return function (f) {
      var result = [];
      for (var i = 0, l = arr.length; i < l; i++) {
        Array.prototype.push.apply(result, f(arr[i]));
      }
      return result;
    };
  };

  //- Monoid ---------------------------------------------------------------------

  exports.concatString = function (s1) {
    return function (s2) {
      return s1 + s2;
    };
  };

  exports.concatArray = function (xs) {
    return function (ys) {
      return xs.concat(ys);
    };
  };

  //- Eq -------------------------------------------------------------------------

  exports.refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };

  exports.eqArrayImpl = function (f) {
    return function (xs) {
      return function (ys) {
        if (xs.length !== ys.length) return false;
        for (var i = 0; i < xs.length; i++) {
          if (!f(xs[i])(ys[i])) return false;
        }
        return true;
      };
    };
  };                                          

  //- BooleanAlgebra -------------------------------------------------------------

  exports.boolOr = function (b1) {
    return function (b2) {
      return b1 || b2;
    };
  };

  exports.boolAnd = function (b1) {
    return function (b2) {
      return b1 && b2;
    };
  };

  exports.boolNot = function (b) {
    return !b;
  };

  //- Show -----------------------------------------------------------------------

  exports.showIntImpl = function (n) {
    return n.toString();
  };
 
})(PS["Prelude"] = PS["Prelude"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Prelude"];
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var Category = function (__superclass_Prelude$dotSemigroupoid_0, id) {
      this["__superclass_Prelude.Semigroupoid_0"] = __superclass_Prelude$dotSemigroupoid_0;
      this.id = id;
  };
  var Functor = function (map) {
      this.map = map;
  };
  var Apply = function (__superclass_Prelude$dotFunctor_0, apply) {
      this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
      this.apply = apply;
  };
  var Applicative = function (__superclass_Prelude$dotApply_0, pure) {
      this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
      this.pure = pure;
  };
  var Bind = function (__superclass_Prelude$dotApply_0, bind) {
      this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
      this.bind = bind;
  };
  var Monad = function (__superclass_Prelude$dotApplicative_0, __superclass_Prelude$dotBind_1) {
      this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
      this["__superclass_Prelude.Bind_1"] = __superclass_Prelude$dotBind_1;
  };
  var Semigroup = function (append) {
      this.append = append;
  };
  var Eq = function (eq) {
      this.eq = eq;
  };
  var Bounded = function (bottom, top) {
      this.bottom = bottom;
      this.top = top;
  };
  var BooleanAlgebra = function (__superclass_Prelude$dotBounded_0, conj, disj, not) {
      this["__superclass_Prelude.Bounded_0"] = __superclass_Prelude$dotBounded_0;
      this.conj = conj;
      this.disj = disj;
      this.not = not;
  };
  var Show = function (show) {
      this.show = show;
  };
  var $hash = function (x) {
      return function (f) {
          return f(x);
      };
  };                                                                           
  var unit = {};
  var top = function (dict) {
      return dict.top;
  };                                                 
  var showInt = new Show($foreign.showIntImpl);
  var show = function (dict) {
      return dict.show;
  };                                                                     
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var semigroupString = new Semigroup($foreign.concatString);
  var semigroupArray = new Semigroup($foreign.concatArray);
  var pure = function (dict) {
      return dict.pure;
  };
  var $$return = function (dictApplicative) {
      return pure(dictApplicative);
  };
  var not = function (dict) {
      return dict.not;
  };
  var map = function (dict) {
      return dict.map;
  };
  var $less$dollar$greater = function (dictFunctor) {
      return map(dictFunctor);
  };
  var $less$hash$greater = function (dictFunctor) {
      return function (fa) {
          return function (f) {
              return $less$dollar$greater(dictFunctor)(f)(fa);
          };
      };
  };
  var id = function (dict) {
      return dict.id;
  };
  var functorArray = new Functor($foreign.arrayMap);
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };                
  var eqInt = new Eq($foreign.refEq);
  var eq = function (dict) {
      return dict.eq;
  };
  var $eq$eq = function (dictEq) {
      return eq(dictEq);
  };
  var eqArray = function (dictEq) {
      return new Eq($foreign.eqArrayImpl($eq$eq(dictEq)));
  };
  var disj = function (dict) {
      return dict.disj;
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  var $$void = function (dictFunctor) {
      return function (fa) {
          return $less$dollar$greater(dictFunctor)($$const(unit))(fa);
      };
  };
  var conj = function (dict) {
      return dict.conj;
  };
  var compose = function (dict) {
      return dict.compose;
  };
  var categoryFn = new Category(function () {
      return semigroupoidFn;
  }, function (x) {
      return x;
  });
  var boundedBoolean = new Bounded(false, true);
  var bottom = function (dict) {
      return dict.bottom;
  };
  var booleanAlgebraBoolean = new BooleanAlgebra(function () {
      return boundedBoolean;
  }, $foreign.boolAnd, $foreign.boolOr, $foreign.boolNot);
  var $div$eq = function (dictEq) {
      return function (x) {
          return function (y) {
              return not(booleanAlgebraBoolean)($eq$eq(dictEq)(x)(y));
          };
      };
  };
  var bind = function (dict) {
      return dict.bind;
  };
  var liftM1 = function (dictMonad) {
      return function (f) {
          return function (a) {
              return bind(dictMonad["__superclass_Prelude.Bind_1"]())(a)(function (v) {
                  return $$return(dictMonad["__superclass_Prelude.Applicative_0"]())(f(v));
              });
          };
      };
  };
  var $greater$greater$eq = function (dictBind) {
      return bind(dictBind);
  }; 
  var apply = function (dict) {
      return dict.apply;
  };
  var $less$times$greater = function (dictApply) {
      return apply(dictApply);
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return $less$times$greater(dictApplicative["__superclass_Prelude.Apply_0"]())(pure(dictApplicative)(f))(a);
          };
      };
  }; 
  var append = function (dict) {
      return dict.append;
  };
  var $plus$plus = function (dictSemigroup) {
      return append(dictSemigroup);
  };
  var $less$greater = function (dictSemigroup) {
      return append(dictSemigroup);
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return bind(dictMonad["__superclass_Prelude.Bind_1"]())(f)(function (v) {
                  return bind(dictMonad["__superclass_Prelude.Bind_1"]())(a)(function (v1) {
                      return $$return(dictMonad["__superclass_Prelude.Applicative_0"]())(v(v1));
                  });
              });
          };
      };
  };
  var monadArray = new Monad(function () {
      return applicativeArray;
  }, function () {
      return bindArray;
  });
  var bindArray = new Bind(function () {
      return applyArray;
  }, $foreign.arrayBind);
  var applyArray = new Apply(function () {
      return functorArray;
  }, ap(monadArray));
  var applicativeArray = new Applicative(function () {
      return applyArray;
  }, function (x) {
      return [ x ];
  });
  exports["Show"] = Show;
  exports["BooleanAlgebra"] = BooleanAlgebra;
  exports["Bounded"] = Bounded;
  exports["Eq"] = Eq;
  exports["Semigroup"] = Semigroup;
  exports["Monad"] = Monad;
  exports["Bind"] = Bind;
  exports["Applicative"] = Applicative;
  exports["Apply"] = Apply;
  exports["Functor"] = Functor;
  exports["Category"] = Category;
  exports["Semigroupoid"] = Semigroupoid;
  exports["show"] = show;
  exports["not"] = not;
  exports["disj"] = disj;
  exports["conj"] = conj;
  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["/="] = $div$eq;
  exports["=="] = $eq$eq;
  exports["eq"] = eq;
  exports["++"] = $plus$plus;
  exports["<>"] = $less$greater;
  exports["append"] = append;
  exports["ap"] = ap;
  exports["liftM1"] = liftM1;
  exports["return"] = $$return;
  exports[">>="] = $greater$greater$eq;
  exports["bind"] = bind;
  exports["liftA1"] = liftA1;
  exports["pure"] = pure;
  exports["<*>"] = $less$times$greater;
  exports["apply"] = apply;
  exports["void"] = $$void;
  exports["<#>"] = $less$hash$greater;
  exports["<$>"] = $less$dollar$greater;
  exports["map"] = map;
  exports["id"] = id;
  exports["compose"] = compose;
  exports["const"] = $$const;
  exports["flip"] = flip;
  exports["#"] = $hash;
  exports["unit"] = unit;
  exports["semigroupoidFn"] = semigroupoidFn;
  exports["categoryFn"] = categoryFn;
  exports["functorArray"] = functorArray;
  exports["applyArray"] = applyArray;
  exports["applicativeArray"] = applicativeArray;
  exports["bindArray"] = bindArray;
  exports["monadArray"] = monadArray;
  exports["semigroupString"] = semigroupString;
  exports["semigroupArray"] = semigroupArray;
  exports["eqInt"] = eqInt;
  exports["eqArray"] = eqArray;
  exports["boundedBoolean"] = boundedBoolean;
  exports["booleanAlgebraBoolean"] = booleanAlgebraBoolean;
  exports["showInt"] = showInt;;
 
})(PS["Prelude"] = PS["Prelude"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];     
  var Alt = function (__superclass_Prelude$dotFunctor_0, alt) {
      this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
      this.alt = alt;
  };                                         
  var alt = function (dict) {
      return dict.alt;
  };
  var $less$bar$greater = function (dictAlt) {
      return alt(dictAlt);
  };
  exports["Alt"] = Alt;
  exports["<|>"] = $less$bar$greater;
  exports["alt"] = alt;;
 
})(PS["Control.Alt"] = PS["Control.Alt"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];     
  var $less$times = function (dictApply) {
      return function (a) {
          return function (b) {
              return Prelude["<*>"](dictApply)(Prelude["<$>"](dictApply["__superclass_Prelude.Functor_0"]())(Prelude["const"])(a))(b);
          };
      };
  };
  var $times$greater = function (dictApply) {
      return function (a) {
          return function (b) {
              return Prelude["<*>"](dictApply)(Prelude["<$>"](dictApply["__superclass_Prelude.Functor_0"]())(Prelude["const"](Prelude.id(Prelude.categoryFn)))(a))(b);
          };
      };
  };
  exports["*>"] = $times$greater;
  exports["<*"] = $less$times;;
 
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Control.Monad.Eff

  exports.returnE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };

  exports.runPure = function (f) {
    return f();
  };
 
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Control.Monad.Eff"];
  var Prelude = PS["Prelude"];     
  var monadEff = new Prelude.Monad(function () {
      return applicativeEff;
  }, function () {
      return bindEff;
  });
  var bindEff = new Prelude.Bind(function () {
      return applyEff;
  }, $foreign.bindE);
  var applyEff = new Prelude.Apply(function () {
      return functorEff;
  }, Prelude.ap(monadEff));
  var applicativeEff = new Prelude.Applicative(function () {
      return applyEff;
  }, $foreign.returnE);
  var functorEff = new Prelude.Functor(Prelude.liftA1(applicativeEff));
  exports["functorEff"] = functorEff;
  exports["applyEff"] = applyEff;
  exports["applicativeEff"] = applicativeEff;
  exports["bindEff"] = bindEff;
  exports["monadEff"] = monadEff;
  exports["runPure"] = $foreign.runPure;;
 
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Foldable

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
 
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];     
  var Monoid = function (__superclass_Prelude$dotSemigroup_0, mempty) {
      this["__superclass_Prelude.Semigroup_0"] = __superclass_Prelude$dotSemigroup_0;
      this.mempty = mempty;
  };               
  var monoidString = new Monoid(function () {
      return Prelude.semigroupString;
  }, "");
  var monoidArray = new Monoid(function () {
      return Prelude.semigroupArray;
  }, [  ]);
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["Monoid"] = Monoid;
  exports["mempty"] = mempty;
  exports["monoidString"] = monoidString;
  exports["monoidArray"] = monoidArray;;
 
})(PS["Data.Monoid"] = PS["Data.Monoid"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Extend = PS["Control.Extend"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];     
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe line 26, column 1 - line 27, column 1: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };                                                
  var functorMaybe = new Prelude.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Just) {
              return new Just(v(v1.value0));
          };
          return Nothing.value;
      };
  });
  var applyMaybe = new Prelude.Apply(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return Prelude["<$>"](functorMaybe)(v.value0)(v1);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe line 121, column 1 - line 145, column 1: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["maybe"] = maybe;
  exports["functorMaybe"] = functorMaybe;
  exports["applyMaybe"] = applyMaybe;;
 
})(PS["Data.Maybe"] = PS["Data.Maybe"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Data_Monoid = PS["Data.Monoid"];     
  var Disj = function (x) {
      return x;
  };
  var semigroupDisj = function (dictBooleanAlgebra) {
      return new Prelude.Semigroup(function (v) {
          return function (v1) {
              return Prelude.disj(dictBooleanAlgebra)(v)(v1);
          };
      });
  };
  var runDisj = function (v) {
      return v;
  };
  var monoidDisj = function (dictBooleanAlgebra) {
      return new Data_Monoid.Monoid(function () {
          return semigroupDisj(dictBooleanAlgebra);
      }, Prelude.bottom(dictBooleanAlgebra["__superclass_Prelude.Bounded_0"]()));
  };
  exports["Disj"] = Disj;
  exports["runDisj"] = runDisj;
  exports["semigroupDisj"] = semigroupDisj;
  exports["monoidDisj"] = monoidDisj;;
 
})(PS["Data.Monoid.Disj"] = PS["Data.Monoid.Disj"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Foldable"];
  var Prelude = PS["Prelude"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];     
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var foldl = function (dict) {
      return dict.foldl;
  }; 
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return function (xs) {
                  return foldr(dictFoldable)(function (x) {
                      return function (acc) {
                          return Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(f(x))(acc);
                      };
                  })(Data_Monoid.mempty(dictMonoid))(xs);
              };
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  var any = function (dictFoldable) {
      return function (dictBooleanAlgebra) {
          return function (p) {
              return function ($164) {
                  return Data_Monoid_Disj.runDisj(foldMap(dictFoldable)(Data_Monoid_Disj.monoidDisj(dictBooleanAlgebra))(function ($165) {
                      return Data_Monoid_Disj.Disj(p($165));
                  })($164));
              };
          };
      };
  };
  var elem = function (dictFoldable) {
      return function (dictEq) {
          return function ($166) {
              return any(dictFoldable)(Prelude.booleanAlgebraBoolean)(Prelude["=="](dictEq)($166));
          };
      };
  };
  exports["Foldable"] = Foldable;
  exports["elem"] = elem;
  exports["any"] = any;
  exports["foldMapDefaultR"] = foldMapDefaultR;
  exports["foldMap"] = foldMap;
  exports["foldl"] = foldl;
  exports["foldr"] = foldr;
  exports["foldableArray"] = foldableArray;;
 
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Traversable

  // jshint maxparams: 3

  exports.traverseArrayImpl = function () {
    function Cont (fn) {
      this.fn = fn;
    }

    var emptyList = {};

    var ConsCell = function (head, tail) {
      this.head = head;
      this.tail = tail;
    };

    function consList (x) {
      return function (xs) {
        return new ConsCell(x, xs);
      };
    }

    function listToArray (list) {
      var arr = [];
      while (list !== emptyList) {
        arr.push(list.head);
        list = list.tail;
      }
      return arr;
    }

    return function (apply) {
      return function (map) {
        return function (pure) {
          return function (f) {
            var buildFrom = function (x, ys) {
              return apply(map(consList)(f(x)))(ys);
            };

            var go = function (acc, currentLen, xs) {
              if (currentLen === 0) {
                return acc;
              } else {
                var last = xs[currentLen - 1];
                return new Cont(function () {
                  return go(buildFrom(last, acc), currentLen - 1, xs);
                });
              }
            };

            return function (array) {
              var result = go(pure(emptyList), array.length, array);
              while (result instanceof Cont) {
                result = result.fn();
              }

              return map(listToArray)(result);
            };
          };
        };
      };
    };
  }();
 
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Traversable"];
  var Prelude = PS["Prelude"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Traversable = function (__superclass_Data$dotFoldable$dotFoldable_1, __superclass_Prelude$dotFunctor_0, sequence, traverse) {
      this["__superclass_Data.Foldable.Foldable_1"] = __superclass_Data$dotFoldable$dotFoldable_1;
      this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
      this.sequence = sequence;
      this.traverse = traverse;
  };
  var traverse = function (dict) {
      return dict.traverse;
  };
  var sequenceDefault = function (dictTraversable) {
      return function (dictApplicative) {
          return function (tma) {
              return traverse(dictTraversable)(dictApplicative)(Prelude.id(Prelude.categoryFn))(tma);
          };
      };
  };
  var traversableArray = new Traversable(function () {
      return Data_Foldable.foldableArray;
  }, function () {
      return Prelude.functorArray;
  }, function (dictApplicative) {
      return sequenceDefault(traversableArray)(dictApplicative);
  }, function (dictApplicative) {
      return $foreign.traverseArrayImpl(Prelude.apply(dictApplicative["__superclass_Prelude.Apply_0"]()))(Prelude.map((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]()))(Prelude.pure(dictApplicative));
  });
  var sequence = function (dict) {
      return dict.sequence;
  };
  exports["Traversable"] = Traversable;
  exports["sequenceDefault"] = sequenceDefault;
  exports["sequence"] = sequence;
  exports["traverse"] = traverse;
  exports["traversableArray"] = traversableArray;;
 
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];     
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  exports["Tuple"] = Tuple;;
 
})(PS["Data.Tuple"] = PS["Data.Tuple"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Extend = PS["Control.Extend"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];     
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  var functorEither = new Prelude.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Left) {
              return new Left(v1.value0);
          };
          if (v1 instanceof Right) {
              return new Right(v(v1.value0));
          };
          throw new Error("Failed pattern match at Data.Either line 52, column 1 - line 56, column 1: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var either = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return v(v2.value0);
              };
              if (v2 instanceof Right) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Either line 28, column 1 - line 29, column 1: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  }; 
  var applyEither = new Prelude.Apply(function () {
      return functorEither;
  }, function (v) {
      return function (v1) {
          if (v instanceof Left) {
              return new Left(v.value0);
          };
          if (v instanceof Right) {
              return Prelude["<$>"](functorEither)(v.value0)(v1);
          };
          throw new Error("Failed pattern match at Data.Either line 92, column 1 - line 116, column 1: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindEither = new Prelude.Bind(function () {
      return applyEither;
  }, either(function (e) {
      return function (v) {
          return new Left(e);
      };
  })(function (a) {
      return function (f) {
          return f(a);
      };
  }));
  var applicativeEither = new Prelude.Applicative(function () {
      return applyEither;
  }, Right.create);
  exports["Left"] = Left;
  exports["Right"] = Right;
  exports["either"] = either;
  exports["functorEither"] = functorEither;
  exports["applyEither"] = applyEither;
  exports["applicativeEither"] = applicativeEither;
  exports["bindEither"] = bindEither;;
 
})(PS["Data.Either"] = PS["Data.Either"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Tuple = PS["Data.Tuple"];     
  var MonadState = function (__superclass_Prelude$dotMonad_0, state) {
      this["__superclass_Prelude.Monad_0"] = __superclass_Prelude$dotMonad_0;
      this.state = state;
  };
  var state = function (dict) {
      return dict.state;
  };
  var modify = function (dictMonadState) {
      return function (f) {
          return state(dictMonadState)(function (s) {
              return new Data_Tuple.Tuple(Prelude.unit, f(s));
          });
      };
  };
  var gets = function (dictMonadState) {
      return function (f) {
          return state(dictMonadState)(function (s) {
              return new Data_Tuple.Tuple(f(s), s);
          });
      };
  };
  var get = function (dictMonadState) {
      return state(dictMonadState)(function (s) {
          return new Data_Tuple.Tuple(s, s);
      });
  };
  exports["MonadState"] = MonadState;
  exports["modify"] = modify;
  exports["gets"] = gets;
  exports["get"] = get;
  exports["state"] = state;;
 
})(PS["Control.Monad.State.Class"] = PS["Control.Monad.State.Class"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Either = PS["Data.Either"];
  var Data_Monoid = PS["Data.Monoid"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Monad_Cont_Class = PS["Control.Monad.Cont.Class"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_RWS_Class = PS["Control.Monad.RWS.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans = PS["Control.Monad.Trans"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];     
  var ExceptT = function (x) {
      return x;
  };
  var runExceptT = function (v) {
      return v;
  }; 
  var mapExceptT = function (f) {
      return function (m) {
          return f(runExceptT(m));
      };
  };
  var functorExceptT = function (dictFunctor) {
      return new Prelude.Functor(function (f) {
          return mapExceptT(Prelude["<$>"](dictFunctor)(Prelude["<$>"](Data_Either.functorEither)(f)));
      });
  };
  var applyExceptT = function (dictApply) {
      return new Prelude.Apply(function () {
          return functorExceptT(dictApply["__superclass_Prelude.Functor_0"]());
      }, function (v) {
          return function (v1) {
              var f$prime = Prelude["<$>"](dictApply["__superclass_Prelude.Functor_0"]())(Prelude["<*>"](Data_Either.applyEither))(v);
              var x$prime = Prelude["<*>"](dictApply)(f$prime)(v1);
              return x$prime;
          };
      });
  };
  var bindExceptT = function (dictMonad) {
      return new Prelude.Bind(function () {
          return applyExceptT((dictMonad["__superclass_Prelude.Bind_1"]())["__superclass_Prelude.Apply_0"]());
      }, function (m) {
          return function (k) {
              return Prelude[">>="](dictMonad["__superclass_Prelude.Bind_1"]())(runExceptT(m))(Data_Either.either(function ($68) {
                  return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())(Data_Either.Left.create($68));
              })(function ($69) {
                  return runExceptT(k($69));
              }));
          };
      });
  };
  var applicativeExceptT = function (dictApplicative) {
      return new Prelude.Applicative(function () {
          return applyExceptT(dictApplicative["__superclass_Prelude.Apply_0"]());
      }, function ($70) {
          return ExceptT(Prelude.pure(dictApplicative)(Data_Either.Right.create($70)));
      });
  };
  exports["ExceptT"] = ExceptT;
  exports["mapExceptT"] = mapExceptT;
  exports["runExceptT"] = runExceptT;
  exports["functorExceptT"] = functorExceptT;
  exports["applyExceptT"] = applyExceptT;
  exports["applicativeExceptT"] = applicativeExceptT;
  exports["bindExceptT"] = bindExceptT;;
 
})(PS["Control.Monad.Except.Trans"] = PS["Control.Monad.Except.Trans"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];     
  var Identity = function (x) {
      return x;
  };
  var runIdentity = function (v) {
      return v;
  };
  var functorIdentity = new Prelude.Functor(function (f) {
      return function (v) {
          return f(v);
      };
  });
  var applyIdentity = new Prelude.Apply(function () {
      return functorIdentity;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var bindIdentity = new Prelude.Bind(function () {
      return applyIdentity;
  }, function (v) {
      return function (f) {
          return f(v);
      };
  });
  var applicativeIdentity = new Prelude.Applicative(function () {
      return applyIdentity;
  }, Identity);
  var monadIdentity = new Prelude.Monad(function () {
      return applicativeIdentity;
  }, function () {
      return bindIdentity;
  });
  exports["Identity"] = Identity;
  exports["runIdentity"] = runIdentity;
  exports["functorIdentity"] = functorIdentity;
  exports["applyIdentity"] = applyIdentity;
  exports["applicativeIdentity"] = applicativeIdentity;
  exports["bindIdentity"] = bindIdentity;
  exports["monadIdentity"] = monadIdentity;;
 
})(PS["Data.Identity"] = PS["Data.Identity"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Data_Either = PS["Data.Either"];
  var Data_Identity = PS["Data.Identity"];                                               
  var runExcept = function ($0) {
      return Data_Identity.runIdentity(Control_Monad_Except_Trans.runExceptT($0));
  };
  var except = function ($2) {
      return Control_Monad_Except_Trans.ExceptT(Data_Identity.Identity($2));
  };
  exports["runExcept"] = runExcept;
  exports["except"] = except;;
 
})(PS["Control.Monad.Except"] = PS["Control.Monad.Except"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Control.Monad.ST

  exports.newSTRef = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.readSTRef = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports.writeSTRef = function (ref) {
    return function (a) {
      return function () {
        /* jshint boss: true */
        return ref.value = a;
      };
    };
  };
 
})(PS["Control.Monad.ST"] = PS["Control.Monad.ST"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Control.Monad.ST"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  exports["writeSTRef"] = $foreign.writeSTRef;
  exports["readSTRef"] = $foreign.readSTRef;
  exports["newSTRef"] = $foreign.newSTRef;;
 
})(PS["Control.Monad.ST"] = PS["Control.Monad.ST"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Either = PS["Data.Either"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_Cont_Class = PS["Control.Monad.Cont.Class"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans = PS["Control.Monad.Trans"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];     
  var StateT = function (x) {
      return x;
  };
  var runStateT = function (v) {
      return v;
  };
  var monadStateT = function (dictMonad) {
      return new Prelude.Monad(function () {
          return applicativeStateT(dictMonad);
      }, function () {
          return bindStateT(dictMonad);
      });
  };
  var functorStateT = function (dictMonad) {
      return new Prelude.Functor(Prelude.liftM1(monadStateT(dictMonad)));
  };
  var bindStateT = function (dictMonad) {
      return new Prelude.Bind(function () {
          return applyStateT(dictMonad);
      }, function (v) {
          return function (f) {
              return function (s) {
                  return Prelude.bind(dictMonad["__superclass_Prelude.Bind_1"]())(v(s))(function (v1) {
                      return runStateT(f(v1.value0))(v1.value1);
                  });
              };
          };
      });
  };
  var applyStateT = function (dictMonad) {
      return new Prelude.Apply(function () {
          return functorStateT(dictMonad);
      }, Prelude.ap(monadStateT(dictMonad)));
  };
  var applicativeStateT = function (dictMonad) {
      return new Prelude.Applicative(function () {
          return applyStateT(dictMonad);
      }, function (a) {
          return StateT(function (s) {
              return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())(new Data_Tuple.Tuple(a, s));
          });
      });
  };
  var monadStateStateT = function (dictMonad) {
      return new Control_Monad_State_Class.MonadState(function () {
          return monadStateT(dictMonad);
      }, function (f) {
          return StateT(function ($63) {
              return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())(f($63));
          });
      });
  };
  exports["StateT"] = StateT;
  exports["runStateT"] = runStateT;
  exports["functorStateT"] = functorStateT;
  exports["applyStateT"] = applyStateT;
  exports["applicativeStateT"] = applicativeStateT;
  exports["bindStateT"] = bindStateT;
  exports["monadStateT"] = monadStateT;
  exports["monadStateStateT"] = monadStateStateT;;
 
})(PS["Control.Monad.State.Trans"] = PS["Control.Monad.State.Trans"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_State_Trans = PS["Control.Monad.State.Trans"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Tuple = PS["Data.Tuple"];                   
  var runState = function (s) {
      return function ($0) {
          return Data_Identity.runIdentity(Control_Monad_State_Trans.runStateT(s)($0));
      };
  };
  exports["runState"] = runState;;
 
})(PS["Control.Monad.State"] = PS["Control.Monad.State"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Array

  //------------------------------------------------------------------------------
  // Array creation --------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.range = function (start) {
    return function (end) {
      var step = start > end ? -1 : 1;
      var result = [];
      for (var i = start, n = 0; i !== end; i += step) {
        result[n++] = i;
      }
      result[n] = i;
      return result;
    };
  };

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  //------------------------------------------------------------------------------
  // Extending arrays ------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.cons = function (e) {
    return function (l) {
      return [e].concat(l);
    };
  };

  exports.snoc = function (l) {
    return function (e) {
      var l1 = l.slice();
      l1.push(e);
      return l1;
    };
  };

  //------------------------------------------------------------------------------
  // Non-indexed reads -----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports["uncons'"] = function (empty) {
    return function (next) {
      return function (xs) {
        return xs.length === 0 ? empty({}) : next(xs[0])(xs.slice(1));
      };
    };
  };

  //------------------------------------------------------------------------------
  // Indexed operations ----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.indexImpl = function (just) {
    return function (nothing) {
      return function (xs) {
        return function (i) {
          return i < 0 || i >= xs.length ? nothing :  just(xs[i]);
        };
      };
    };
  };

  exports.concat = function (xss) {
    var result = [];
    for (var i = 0, l = xss.length; i < l; i++) {
      var xs = xss[i];
      for (var j = 0, m = xs.length; j < m; j++) {
        result.push(xs[j]);
      }
    }
    return result;
  };

  //------------------------------------------------------------------------------
  // Subarrays -------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.slice = function (s) {
    return function (e) {
      return function (l) {
        return l.slice(s, e);
      };
    };
  };

  exports.drop = function (n) {
    return function (l) {
      return n < 1 ? l : l.slice(n);
    };
  };

  //------------------------------------------------------------------------------
  // Zipping ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.zipWith = function (f) {
    return function (xs) {
      return function (ys) {
        var l = xs.length < ys.length ? xs.length : ys.length;
        var result = new Array(l);
        for (var i = 0; i < l; i++) {
          result[i] = f(xs[i])(ys[i]);
        }
        return result;
      };
    };
  };
 
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Array"];
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Maybe_Unsafe = PS["Data.Maybe.Unsafe"];     
  var $colon = $foreign.cons;
  var $dot$dot = $foreign.range;
  var uncons = $foreign["uncons'"](Prelude["const"](Data_Maybe.Nothing.value))(function (x) {
      return function (xs) {
          return new Data_Maybe.Just({
              head: x, 
              tail: xs
          });
      };
  });
  var take = $foreign.slice(0);
  var tail = $foreign["uncons'"](Prelude["const"](Data_Maybe.Nothing.value))(function (v) {
      return function (xs) {
          return new Data_Maybe.Just(xs);
      };
  });
  var singleton = function (a) {
      return [ a ];
  };
  var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var $bang$bang = index;
  var last = function (xs) {
      return $bang$bang(xs)($foreign.length(xs) - 1);
  };
  var head = $foreign["uncons'"](Prelude["const"](Data_Maybe.Nothing.value))(function (x) {
      return function (v) {
          return new Data_Maybe.Just(x);
      };
  });
  var concatMap = Prelude.flip(Prelude.bind(Prelude.bindArray));
  var mapMaybe = function (f) {
      return concatMap(function ($69) {
          return Data_Maybe.maybe([  ])(singleton)(f($69));
      });
  };
  exports["take"] = take;
  exports["mapMaybe"] = mapMaybe;
  exports["concatMap"] = concatMap;
  exports["index"] = index;
  exports["uncons"] = uncons;
  exports["tail"] = tail;
  exports["last"] = last;
  exports["head"] = head;
  exports[":"] = $colon;
  exports[".."] = $dot$dot;
  exports["singleton"] = singleton;
  exports["zipWith"] = $foreign.zipWith;
  exports["drop"] = $foreign.drop;
  exports["snoc"] = $foreign.snoc;
  exports["length"] = $foreign.length;;
 
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Array.ST

  exports.runSTArray = function (f) {
    return f;
  };

  exports.emptySTArray = function () {
    return [];
  };

  exports.pushAllSTArray = function (xs) {
    return function (as) {
      return function () {
        return xs.push.apply(xs, as);
      };
    };
  };
 
})(PS["Data.Array.ST"] = PS["Data.Array.ST"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Array.ST"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Data_Maybe = PS["Data.Maybe"];
  var pushSTArray = function (arr) {
      return function (a) {
          return $foreign.pushAllSTArray(arr)([ a ]);
      };
  };
  exports["pushSTArray"] = pushSTArray;
  exports["emptySTArray"] = $foreign.emptySTArray;
  exports["runSTArray"] = $foreign.runSTArray;;
 
})(PS["Data.Array.ST"] = PS["Data.Array.ST"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Char

  exports.toString = function (c) {
    return c;
  };

  exports.toCharCode = function (c) {
    return c.charCodeAt(0);
  };
 
})(PS["Data.Char"] = PS["Data.Char"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Char"];
  var Prelude = PS["Prelude"];
  exports["toCharCode"] = $foreign.toCharCode;
  exports["toString"] = $foreign.toString;;
 
})(PS["Data.Char"] = PS["Data.Char"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // jshint maxparams: 1
  exports.toForeign = function (value) {
    return value;
  };

  exports.unsafeFromForeign = function (value) {
    return value;
  };

  exports.typeOf = function (value) {
    return typeof value;
  };

  exports.tagOf = function (value) {
    return Object.prototype.toString.call(value).slice(8, -1);
  };

  exports.isNull = function (value) {
    return value === null;
  };

  exports.isUndefined = function (value) {
    return value === undefined;
  };
 
})(PS["Data.Foreign"] = PS["Data.Foreign"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.runFn4 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return fn(a, b, c, d);
          };
        };
      };
    };
  };
 
})(PS["Data.Function"] = PS["Data.Function"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Function"];
  var Prelude = PS["Prelude"];
  exports["runFn4"] = $foreign.runFn4;;
 
})(PS["Data.Function"] = PS["Data.Function"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.String

  exports._charAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (s) {
          return i >= 0 && i < s.length ? just(s.charAt(i)) : nothing;
        };
      };
    };
  };

  exports.fromCharArray = function (a) {
    return a.join("");
  };

  exports.length = function (s) {
    return s.length;
  };

  exports.take = function (n) {
    return function (s) {
      return s.substr(0, n);
    };
  };
 
})(PS["Data.String"] = PS["Data.String"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.String"];
  var Prelude = PS["Prelude"];
  var Data_Char = PS["Data.Char"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_String_Unsafe = PS["Data.String.Unsafe"];                                      
  var charAt = $foreign._charAt(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  exports["charAt"] = charAt;
  exports["take"] = $foreign.take;
  exports["length"] = $foreign.length;
  exports["fromCharArray"] = $foreign.fromCharArray;;
 
})(PS["Data.String"] = PS["Data.String"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Foreign"];
  var Prelude = PS["Prelude"];
  var Data_Either = PS["Data.Either"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Function = PS["Data.Function"];
  var Data_Int = PS["Data.Int"];
  var Data_String = PS["Data.String"];     
  var TypeMismatch = (function () {
      function TypeMismatch(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TypeMismatch.create = function (value0) {
          return function (value1) {
              return new TypeMismatch(value0, value1);
          };
      };
      return TypeMismatch;
  })();
  var ErrorAtProperty = (function () {
      function ErrorAtProperty(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ErrorAtProperty.create = function (value0) {
          return function (value1) {
              return new ErrorAtProperty(value0, value1);
          };
      };
      return ErrorAtProperty;
  })();
  var JSONError = (function () {
      function JSONError(value0) {
          this.value0 = value0;
      };
      JSONError.create = function (value0) {
          return new JSONError(value0);
      };
      return JSONError;
  })();
  var unsafeReadTagged = function (tag) {
      return function (value) {
          if ($foreign.tagOf(value) === tag) {
              return Prelude.pure(Data_Either.applicativeEither)($foreign.unsafeFromForeign(value));
          };
          return new Data_Either.Left(new TypeMismatch(tag, $foreign.tagOf(value)));
      };
  }; 
  var readString = unsafeReadTagged("String");
  exports["TypeMismatch"] = TypeMismatch;
  exports["ErrorAtProperty"] = ErrorAtProperty;
  exports["JSONError"] = JSONError;
  exports["readString"] = readString;
  exports["unsafeReadTagged"] = unsafeReadTagged;
  exports["isUndefined"] = $foreign.isUndefined;
  exports["isNull"] = $foreign.isNull;
  exports["typeOf"] = $foreign.typeOf;
  exports["toForeign"] = $foreign.toForeign;;
 
})(PS["Data.Foreign"] = PS["Data.Foreign"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Foreign.Index

  // jshint maxparams: 4
  exports.unsafeReadPropImpl = function (f, s, key, value) {
    return value == null ? f : s(value[key]);
  };

  // jshint maxparams: 2
  exports.unsafeHasOwnProperty = function (prop, value) {
    return Object.prototype.hasOwnProperty.call(value, prop);
  };

  exports.unsafeHasProperty = function (prop, value) {
    return prop in value;
  };
 
})(PS["Data.Foreign.Index"] = PS["Data.Foreign.Index"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Foreign.Index"];
  var Prelude = PS["Prelude"];
  var Data_Either = PS["Data.Either"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Function = PS["Data.Function"];
  var Data_Int = PS["Data.Int"];     
  var Index = function (errorAt, hasOwnProperty, hasProperty, ix) {
      this.errorAt = errorAt;
      this.hasOwnProperty = hasOwnProperty;
      this.hasProperty = hasProperty;
      this.ix = ix;
  };
  var unsafeReadProp = function (k) {
      return function (value) {
          return $foreign.unsafeReadPropImpl(new Data_Either.Left(new Data_Foreign.TypeMismatch("object", Data_Foreign.typeOf(value))), Prelude.pure(Data_Either.applicativeEither), k, value);
      };
  };
  var prop = unsafeReadProp;
  var ix = function (dict) {
      return dict.ix;
  };
  var $bang = function (dictIndex) {
      return ix(dictIndex);
  };                         
  var hasPropertyImpl = function (v) {
      return function (value) {
          if (Data_Foreign.isNull(value)) {
              return false;
          };
          if (Data_Foreign.isUndefined(value)) {
              return false;
          };
          if (Data_Foreign.typeOf(value) === "object" || Data_Foreign.typeOf(value) === "function") {
              return $foreign.unsafeHasProperty(v, value);
          };
          return false;
      };
  };
  var hasProperty = function (dict) {
      return dict.hasProperty;
  };
  var hasOwnPropertyImpl = function (v) {
      return function (value) {
          if (Data_Foreign.isNull(value)) {
              return false;
          };
          if (Data_Foreign.isUndefined(value)) {
              return false;
          };
          if (Data_Foreign.typeOf(value) === "object" || Data_Foreign.typeOf(value) === "function") {
              return $foreign.unsafeHasOwnProperty(v, value);
          };
          return false;
      };
  };                                                                                                                   
  var indexString = new Index(Data_Foreign.ErrorAtProperty.create, hasOwnPropertyImpl, hasPropertyImpl, Prelude.flip(prop));
  var hasOwnProperty = function (dict) {
      return dict.hasOwnProperty;
  };
  var errorAt = function (dict) {
      return dict.errorAt;
  };
  exports["Index"] = Index;
  exports["errorAt"] = errorAt;
  exports["hasOwnProperty"] = hasOwnProperty;
  exports["hasProperty"] = hasProperty;
  exports["!"] = $bang;
  exports["ix"] = ix;
  exports["prop"] = prop;
  exports["indexString"] = indexString;;
 
})(PS["Data.Foreign.Index"] = PS["Data.Foreign.Index"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Either = PS["Data.Either"];     
  var NullOrUndefined = function (x) {
      return x;
  };
  var runNullOrUndefined = function (v) {
      return v;
  };
  var readNullOrUndefined = function (v) {
      return function (value) {
          if (Data_Foreign.isNull(value) || Data_Foreign.isUndefined(value)) {
              return Prelude.pure(Data_Either.applicativeEither)(Data_Maybe.Nothing.value);
          };
          return Prelude["<$>"](Data_Either.functorEither)(function ($5) {
              return NullOrUndefined(Data_Maybe.Just.create($5));
          })(v(value));
      };
  };
  exports["NullOrUndefined"] = NullOrUndefined;
  exports["readNullOrUndefined"] = readNullOrUndefined;
  exports["runNullOrUndefined"] = runNullOrUndefined;;
 
})(PS["Data.Foreign.NullOrUndefined"] = PS["Data.Foreign.NullOrUndefined"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Array = PS["Data.Array"];
  var Data_Either = PS["Data.Either"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Foreign_Index = PS["Data.Foreign.Index"];
  var Data_Foreign_Null = PS["Data.Foreign.Null"];
  var Data_Foreign_NullOrUndefined = PS["Data.Foreign.NullOrUndefined"];
  var Data_Foreign_Undefined = PS["Data.Foreign.Undefined"];
  var Data_Int = PS["Data.Int"];
  var Data_Traversable = PS["Data.Traversable"];     
  var IsForeign = function (read) {
      this.read = read;
  };
  var stringIsForeign = new IsForeign(Data_Foreign.readString);
  var read = function (dict) {
      return dict.read;
  };
  var readWith = function (dictIsForeign) {
      return function (f) {
          return function (value) {
              return Data_Either.either(function ($8) {
                  return Data_Either.Left.create(f($8));
              })(Data_Either.Right.create)(read(dictIsForeign)(value));
          };
      };
  };
  var readProp = function (dictIsForeign) {
      return function (dictIndex) {
          return function (prop) {
              return function (value) {
                  return Prelude[">>="](Data_Either.bindEither)(Data_Foreign_Index["!"](dictIndex)(value)(prop))(readWith(dictIsForeign)(Data_Foreign_Index.errorAt(dictIndex)(prop)));
              };
          };
      };
  };                                                           
  var nullOrUndefinedIsForeign = function (dictIsForeign) {
      return new IsForeign(Data_Foreign_NullOrUndefined.readNullOrUndefined(read(dictIsForeign)));
  };                                                     
  var foreignIsForeign = new IsForeign(function (f) {
      return Prelude["return"](Data_Either.applicativeEither)(f);
  });
  exports["IsForeign"] = IsForeign;
  exports["readProp"] = readProp;
  exports["readWith"] = readWith;
  exports["read"] = read;
  exports["foreignIsForeign"] = foreignIsForeign;
  exports["stringIsForeign"] = stringIsForeign;
  exports["nullOrUndefinedIsForeign"] = nullOrUndefinedIsForeign;;
 
})(PS["Data.Foreign.Class"] = PS["Data.Foreign.Class"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Generic


  //------------------------------------------------------------------------------
  // Zipping ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.zipAll = function(f) {
      return function(xs) {
          return function(ys) {
              var l = xs.length < ys.length ? xs.length : ys.length;
              for (var i = 0; i < l; i++) {
                  if (!f(xs[i])(ys[i])) {
                      return false;
                  }
              }
              return true;
          };
      };
  };
 
})(PS["Data.Generic"] = PS["Data.Generic"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $$Proxy = (function () {
      function Proxy() {

      };
      Proxy.value = new Proxy();
      return Proxy;
  })();
  exports["Proxy"] = $$Proxy;;
 
})(PS["Type.Proxy"] = PS["Type.Proxy"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Generic"];
  var Prelude = PS["Prelude"];
  var Data_Either = PS["Data.Either"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Array = PS["Data.Array"];
  var Data_String = PS["Data.String"];
  var Type_Proxy = PS["Type.Proxy"];
  var Data_Monoid = PS["Data.Monoid"];     
  var SProd = (function () {
      function SProd(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SProd.create = function (value0) {
          return function (value1) {
              return new SProd(value0, value1);
          };
      };
      return SProd;
  })();
  var SRecord = (function () {
      function SRecord(value0) {
          this.value0 = value0;
      };
      SRecord.create = function (value0) {
          return new SRecord(value0);
      };
      return SRecord;
  })();
  var SNumber = (function () {
      function SNumber(value0) {
          this.value0 = value0;
      };
      SNumber.create = function (value0) {
          return new SNumber(value0);
      };
      return SNumber;
  })();
  var SBoolean = (function () {
      function SBoolean(value0) {
          this.value0 = value0;
      };
      SBoolean.create = function (value0) {
          return new SBoolean(value0);
      };
      return SBoolean;
  })();
  var SInt = (function () {
      function SInt(value0) {
          this.value0 = value0;
      };
      SInt.create = function (value0) {
          return new SInt(value0);
      };
      return SInt;
  })();
  var SString = (function () {
      function SString(value0) {
          this.value0 = value0;
      };
      SString.create = function (value0) {
          return new SString(value0);
      };
      return SString;
  })();
  var SChar = (function () {
      function SChar(value0) {
          this.value0 = value0;
      };
      SChar.create = function (value0) {
          return new SChar(value0);
      };
      return SChar;
  })();
  var SArray = (function () {
      function SArray(value0) {
          this.value0 = value0;
      };
      SArray.create = function (value0) {
          return new SArray(value0);
      };
      return SArray;
  })();
  var SigProd = (function () {
      function SigProd(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SigProd.create = function (value0) {
          return function (value1) {
              return new SigProd(value0, value1);
          };
      };
      return SigProd;
  })();
  var SigString = (function () {
      function SigString() {

      };
      SigString.value = new SigString();
      return SigString;
  })();
  var Generic = function (fromSpine, toSignature, toSpine) {
      this.fromSpine = fromSpine;
      this.toSignature = toSignature;
      this.toSpine = toSpine;
  };
  var toSpine = function (dict) {
      return dict.toSpine;
  };
  var toSignature = function (dict) {
      return dict.toSignature;
  };
  var genericString = new Generic(function (v) {
      if (v instanceof SString) {
          return new Data_Maybe.Just(v.value0);
      };
      return Data_Maybe.Nothing.value;
  }, function (v) {
      return SigString.value;
  }, function (x) {
      return new SString(x);
  });
  var fromSpine = function (dict) {
      return dict.fromSpine;
  };                                                         
  var eqGeneric = new Prelude.Eq(function (v) {
      return function (v1) {
          if (v instanceof SProd && v1 instanceof SProd) {
              return v.value0 === v1.value0 && (Data_Array.length(v.value1) === Data_Array.length(v1.value1) && $foreign.zipAll(function (x) {
                  return function (y) {
                      return Prelude["=="](eqGeneric)(x(Prelude.unit))(y(Prelude.unit));
                  };
              })(v.value1)(v1.value1));
          };
          if (v instanceof SRecord && v1 instanceof SRecord) {
              var go = function (x) {
                  return function (y) {
                      return x.recLabel === y.recLabel && Prelude["=="](eqGeneric)(x.recValue(Prelude.unit))(y.recValue(Prelude.unit));
                  };
              };
              return Data_Array.length(v.value0) === Data_Array.length(v1.value0) && $foreign.zipAll(go)(v.value0)(v1.value0);
          };
          if (v instanceof SInt && v1 instanceof SInt) {
              return v.value0 === v1.value0;
          };
          if (v instanceof SNumber && v1 instanceof SNumber) {
              return v.value0 === v1.value0;
          };
          if (v instanceof SBoolean && v1 instanceof SBoolean) {
              return v.value0 === v1.value0;
          };
          if (v instanceof SChar && v1 instanceof SChar) {
              return v.value0 === v1.value0;
          };
          if (v instanceof SString && v1 instanceof SString) {
              return v.value0 === v1.value0;
          };
          if (v instanceof SArray && v1 instanceof SArray) {
              return Data_Array.length(v.value0) === Data_Array.length(v1.value0) && $foreign.zipAll(function (x) {
                  return function (y) {
                      return Prelude["=="](eqGeneric)(x(Prelude.unit))(y(Prelude.unit));
                  };
              })(v.value0)(v1.value0);
          };
          return false;
      };
  });
  var gEq = function (dictGeneric) {
      return function (x) {
          return function (y) {
              return Prelude["=="](eqGeneric)(toSpine(dictGeneric)(x))(toSpine(dictGeneric)(y));
          };
      };
  };
  var anyProxy = (Type_Proxy["Proxy"]).value;
  exports["SigProd"] = SigProd;
  exports["SigString"] = SigString;
  exports["SProd"] = SProd;
  exports["SRecord"] = SRecord;
  exports["SNumber"] = SNumber;
  exports["SBoolean"] = SBoolean;
  exports["SInt"] = SInt;
  exports["SString"] = SString;
  exports["SChar"] = SChar;
  exports["SArray"] = SArray;
  exports["Generic"] = Generic;
  exports["gEq"] = gEq;
  exports["fromSpine"] = fromSpine;
  exports["toSignature"] = toSignature;
  exports["toSpine"] = toSpine;
  exports["genericString"] = genericString;
  exports["eqGeneric"] = eqGeneric;;
 
})(PS["Data.Generic"] = PS["Data.Generic"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Array_ST = PS["Data.Array.ST"];
  var Data_Traversable = PS["Data.Traversable"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_ST = PS["Control.Monad.ST"];     
  var Unfoldable = function (unfoldr) {
      this.unfoldr = unfoldr;
  };
  var unfoldr = function (dict) {
      return dict.unfoldr;
  };
  var unfoldableArray = new Unfoldable(function (f) {
      return function (b) {
          return Control_Monad_Eff.runPure(Data_Array_ST.runSTArray(function __do() {
              var v = Data_Array_ST.emptySTArray();
              var v1 = Control_Monad_ST.newSTRef(b)();
              (function () {
                  while (!(function __do() {
                      var v2 = Control_Monad_ST.readSTRef(v1)();
                      var $12 = f(v2);
                      if ($12 instanceof Data_Maybe.Nothing) {
                          return true;
                      };
                      if ($12 instanceof Data_Maybe.Just) {
                          Data_Array_ST.pushSTArray(v)($12.value0.value0)();
                          Control_Monad_ST.writeSTRef(v1)($12.value0.value1)();
                          return false;
                      };
                      throw new Error("Failed pattern match at Data.Unfoldable line 29, column 1 - line 49, column 1: " + [ $12.constructor.name ]);
                  })()) {

                  };
                  return {};
              })();
              return v;
          }));
      };
  });
  exports["Unfoldable"] = Unfoldable;
  exports["unfoldr"] = unfoldr;
  exports["unfoldableArray"] = unfoldableArray;;
 
})(PS["Data.Unfoldable"] = PS["Data.Unfoldable"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];     
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var uncons = function (v) {
      if (v instanceof Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Cons) {
          return new Data_Maybe.Just({
              head: v.value0, 
              tail: v.value1
          });
      };
      throw new Error("Failed pattern match at Data.List line 270, column 1 - line 271, column 1: " + [ v.constructor.name ]);
  };
  var toUnfoldable = function (dictUnfoldable) {
      return Data_Unfoldable.unfoldr(dictUnfoldable)(function (xs) {
          return Prelude["<$>"](Data_Maybe.functorMaybe)(function (rec) {
              return new Data_Tuple.Tuple(rec.head, rec.tail);
          })(uncons(xs));
      });
  };
  var tail = function (v) {
      if (v instanceof Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Cons) {
          return new Data_Maybe.Just(v.value1);
      };
      throw new Error("Failed pattern match at Data.List line 251, column 1 - line 252, column 1: " + [ v.constructor.name ]);
  };                     
  var head = function (v) {
      if (v instanceof Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Cons) {
          return new Data_Maybe.Just(v.value0);
      };
      throw new Error("Failed pattern match at Data.List line 236, column 1 - line 237, column 1: " + [ v.constructor.name ]);
  }; 
  var fromList = function (dictUnfoldable) {
      return toUnfoldable(dictUnfoldable);
  };
  var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (acc) {
              return function ($365) {
                  return Prelude.append(dictMonoid["__superclass_Prelude.Semigroup_0"]())(acc)(f($365));
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }, (function () {
      var go = function (__copy_v) {
          return function (__copy_b) {
              return function (__copy_v1) {
                  var v = __copy_v;
                  var b = __copy_b;
                  var v1 = __copy_v1;
                  tco: while (true) {
                      if (v1 instanceof Nil) {
                          return b;
                      };
                      if (v1 instanceof Cons) {
                          var __tco_v = v;
                          var __tco_b = v(b)(v1.value0);
                          var __tco_v1 = v1.value1;
                          v = __tco_v;
                          b = __tco_b;
                          v1 = __tco_v1;
                          continue tco;
                      };
                      throw new Error("Failed pattern match: " + [ v.constructor.name, b.constructor.name, v1.constructor.name ]);
                  };
              };
          };
      };
      return go;
  })(), function (v) {
      return function (b) {
          return function (v1) {
              if (v1 instanceof Nil) {
                  return b;
              };
              if (v1 instanceof Cons) {
                  return v(v1.value0)(Data_Foldable.foldr(foldableList)(v)(b)(v1.value1));
              };
              throw new Error("Failed pattern match: " + [ v.constructor.name, b.constructor.name, v1.constructor.name ]);
          };
      };
  });
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["fromList"] = fromList;
  exports["uncons"] = uncons;
  exports["tail"] = tail;
  exports["head"] = head;
  exports["toUnfoldable"] = toUnfoldable;
  exports["foldableList"] = foldableList;;
 
})(PS["Data.List"] = PS["Data.List"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports._copyEff = function (m) {
    return function () {
      var r = {};
      for (var k in m) {
        if (m.hasOwnProperty(k)) {
          r[k] = m[k];
        }
      }
      return r;
    };
  };

  exports.empty = {};

  exports.runST = function (f) {
    return f;
  };

  // jshint maxparams: 1
  exports._foldM = function (bind) {
    return function (f) {
      return function (mz) {
        return function (m) {
          function g (k) {
            return function (z) {
              return f(z)(k)(m[k]);
            };
          }
          for (var k in m) {
            if (m.hasOwnProperty(k)) {
              mz = bind(mz)(g(k));
            }
          }
          return mz;
        };
      };
    };
  };

  // jshint maxparams: 4
  exports._lookup = function (no, yes, k, m) {
    return k in m ? yes(m[k]) : no;
  };

  function _collect (f) {
    return function (m) {
      var r = [];
      for (var k in m) {
        if (m.hasOwnProperty(k)) {
          r.push(f(k)(m[k]));
        }
      }
      return r;
    };
  }  
 
})(PS["Data.StrMap"] = PS["Data.StrMap"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.poke = function (m) {
    return function (k) {
      return function (v) {
        return function () {
          m[k] = v;
          return m;
        };
      };
    };
  };
 
})(PS["Data.StrMap.ST"] = PS["Data.StrMap.ST"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.StrMap.ST"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Data_Maybe = PS["Data.Maybe"];
  exports["poke"] = $foreign.poke;;
 
})(PS["Data.StrMap.ST"] = PS["Data.StrMap.ST"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.StrMap"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_List = PS["Data.List"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Data_StrMap_ST = PS["Data.StrMap.ST"];
  var thawST = $foreign._copyEff;
  var pureST = function (f) {
      return Control_Monad_Eff.runPure($foreign.runST(f));
  };
  var mutate = function (f) {
      return function (m) {
          return pureST(function __do() {
              var v = thawST(m)();
              f(v)();
              return v;
          });
      };
  };                                                                                 
  var lookup = Data_Function.runFn4($foreign._lookup)(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
  var insert = function (k) {
      return function (v) {
          return mutate(function (s) {
              return Data_StrMap_ST.poke(s)(k)(v);
          });
      };
  };                                                                              
  var fold = $foreign._foldM(Prelude["#"]);
  var foldMap = function (dictMonoid) {
      return function (f) {
          return fold(function (acc) {
              return function (k) {
                  return function (v) {
                      return Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(acc)(f(k)(v));
                  };
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  };
  exports["thawST"] = thawST;
  exports["foldMap"] = foldMap;
  exports["fold"] = fold;
  exports["lookup"] = lookup;
  exports["insert"] = insert;
  exports["empty"] = $foreign.empty;;
 
})(PS["Data.StrMap"] = PS["Data.StrMap"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];     
  var main = Prelude["return"](Control_Monad_Eff.applicativeEff)(Prelude.unit);
  exports["main"] = main;;
 
})(PS["Main"] = PS["Main"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Array = PS["Data.Array"];
  var Data_Char = PS["Data.Char"];
  var Data_Either = PS["Data.Either"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_List = PS["Data.List"];
  var Data_String = PS["Data.String"];
  var Prelude = PS["Prelude"];
  var Data_Monoid = PS["Data.Monoid"];     
  var ParseError = (function () {
      function ParseError(value0) {
          this.value0 = value0;
      };
      ParseError.create = function (value0) {
          return new ParseError(value0);
      };
      return ParseError;
  })();
  var Parser = (function () {
      function Parser(value0) {
          this.value0 = value0;
      };
      Parser.create = function (value0) {
          return new Parser(value0);
      };
      return Parser;
  })();
  var unParser = function (v) {
      return v.value0;
  };
  var $$try = function (p) {
      return new Parser(function (v) {
          return function (fc) {
              return function (sc) {
                  return unParser(p)(v)(function (v1) {
                      return fc(v.pos);
                  })(sc);
              };
          };
      });
  };
  var showParseError = new Prelude.Show(function (v) {
      return v.value0;
  });
  var functorParser = new Prelude.Functor(function (f) {
      return function (p) {
          return new Parser(function (s) {
              return function (fc) {
                  return function (sc) {
                      return unParser(p)(s)(fc)(function (a) {
                          return function (s$prime) {
                              return sc(f(a))(s$prime);
                          };
                      });
                  };
              };
          });
      };
  });
  var fix = function (f) {
      return new Parser(function (s) {
          return function (fc) {
              return function (sc) {
                  return unParser(f(fix(f)))(s)(fc)(sc);
              };
          };
      });
  };
  var fail = function (msg) {
      return new Parser(function (v) {
          return function (fc) {
              return function (v1) {
                  return fc(v.pos)(new ParseError(msg));
              };
          };
      });
  };
  var eof = new Parser(function (s) {
      return function (fc) {
          return function (sc) {
              if (s.pos < Data_String.length(s.str)) {
                  return fc(s.pos)(new ParseError("Expected EOF"));
              };
              return sc(Prelude.unit)(s);
          };
      };
  });
  var applyParser = new Prelude.Apply(function () {
      return functorParser;
  }, function (f) {
      return function (x) {
          return new Parser(function (s) {
              return function (fc) {
                  return function (sc) {
                      return unParser(f)(s)(fc)(function (f$prime) {
                          return function (s$prime) {
                              return unParser(x)(s$prime)(fc)(function (x$prime) {
                                  return function (s$prime$prime) {
                                      return sc(f$prime(x$prime))(s$prime$prime);
                                  };
                              });
                          };
                      });
                  };
              };
          });
      };
  });
  var bindParser = new Prelude.Bind(function () {
      return applyParser;
  }, function (p) {
      return function (f) {
          return new Parser(function (s) {
              return function (fc) {
                  return function (sc) {
                      return unParser(p)(s)(fc)(function (a) {
                          return function (s$prime) {
                              return unParser(f(a))(s$prime)(fc)(sc);
                          };
                      });
                  };
              };
          });
      };
  });
  var applicativeParser = new Prelude.Applicative(function () {
      return applyParser;
  }, function (a) {
      return new Parser(function (s) {
          return function (v) {
              return function (sc) {
                  return sc(a)(s);
              };
          };
      });
  });
  var anyChar = new Parser(function (s) {
      return function (fc) {
          return function (sc) {
              var $36 = Data_String.charAt(s.pos)(s.str);
              if ($36 instanceof Data_Maybe.Just) {
                  return sc($36.value0)({
                      str: s.str, 
                      pos: s.pos + 1 | 0
                  });
              };
              if ($36 instanceof Data_Maybe.Nothing) {
                  return fc(s.pos)(new ParseError("Unexpected EOF"));
              };
              throw new Error("Failed pattern match at Verne.Utils.Parsing line 124, column 1 - line 125, column 1: " + [ $36.constructor.name ]);
          };
      };
  });
  var anyDigit = $$try(Prelude.bind(bindParser)(anyChar)(function (v) {
      var $41 = v >= "0" && v <= "9";
      if ($41) {
          return Prelude["return"](applicativeParser)(v);
      };
      if (!$41) {
          return fail("Character " + (Data_Char.toString(v) + " is not a digit"));
      };
      throw new Error("Failed pattern match at Verne.Utils.Parsing line 131, column 1 - line 132, column 1: " + [ $41.constructor.name ]);
  }));
  var lowerCaseChar = Prelude.bind(bindParser)(anyChar)(function (v) {
      var $43 = Data_Foldable.elem(Data_Foldable.foldableArray)(Prelude.eqInt)(Data_Char.toCharCode(v))(Data_Array[".."](97)(122));
      if ($43) {
          return Prelude["return"](applicativeParser)(v);
      };
      if (!$43) {
          return fail("Expected a lower case character but found '" + (Data_Char.toString(v) + "'"));
      };
      throw new Error("Failed pattern match at Verne.Utils.Parsing line 149, column 1 - line 150, column 1: " + [ $43.constructor.name ]);
  });
  var satisfy = function (f) {
      return $$try(Prelude.bind(bindParser)(anyChar)(function (v) {
          var $45 = f(v);
          if ($45) {
              return Prelude["return"](applicativeParser)(v);
          };
          if (!$45) {
              return fail("Character " + (Data_Char.toString(v) + " did not satisfy predicate"));
          };
          throw new Error("Failed pattern match at Verne.Utils.Parsing line 106, column 1 - line 107, column 1: " + [ $45.constructor.name ]);
      }));
  };
  var upperCaseChar = Prelude.bind(bindParser)(anyChar)(function (v) {
      var $47 = Data_Foldable.elem(Data_Foldable.foldableArray)(Prelude.eqInt)(Data_Char.toCharCode(v))(Data_Array[".."](65)(90));
      if ($47) {
          return Prelude["return"](applicativeParser)(v);
      };
      if (!$47) {
          return fail("Expected an upper case character but found '" + (Data_Char.toString(v) + "'"));
      };
      throw new Error("Failed pattern match at Verne.Utils.Parsing line 157, column 1 - line 158, column 1: " + [ $47.constructor.name ]);
  });
  var altParser = new Control_Alt.Alt(function () {
      return functorParser;
  }, function (p1) {
      return function (p2) {
          return new Parser(function (s) {
              return function (fc) {
                  return function (sc) {
                      return unParser(p1)(s)(function (v) {
                          return function (v1) {
                              return unParser(p2)(s)(fc)(sc);
                          };
                      })(sc);
                  };
              };
          });
      };
  });
  var many1 = function (p) {
      return Prelude.bind(bindParser)(p)(function (v) {
          return Prelude.bind(bindParser)(many(p))(function (v1) {
              return Prelude["return"](applicativeParser)(new Data_List.Cons(v, v1));
          });
      });
  };
  var many = function (p) {
      return Control_Alt["<|>"](altParser)(many1(p))(Prelude["return"](applicativeParser)(Data_List.Nil.value));
  };
  var whiteSpace = Prelude.bind(bindParser)(many(satisfy(function (c) {
      return c === "\n" || (c === "\r" || (c === " " || c === "\t"));
  })))(function (v) {
      return Prelude["return"](applicativeParser)(Data_Foldable.foldMap(Data_List.foldableList)(Data_Monoid.monoidString)(Data_Char.toString)(v));
  });
  var skipSpaces = Prelude["void"](functorParser)(whiteSpace);
  var $less$qmark$greater = function (p) {
      return function (msg) {
          return Control_Alt["<|>"](altParser)(p)(fail(msg));
      };
  };
  var $$char = function (c) {
      return $less$qmark$greater(satisfy(function (v) {
          return v === c;
      }))("Could not match character " + Data_Char.toString(c));
  };
  var alphaNum = $less$qmark$greater(Control_Alt["<|>"](altParser)(Control_Alt["<|>"](altParser)(lowerCaseChar)(upperCaseChar))(anyDigit))("Expected a letter or a number");
  exports["Parser"] = Parser;
  exports["ParseError"] = ParseError;
  exports["alphaNum"] = alphaNum;
  exports["upperCaseChar"] = upperCaseChar;
  exports["lowerCaseChar"] = lowerCaseChar;
  exports["skipSpaces"] = skipSpaces;
  exports["whiteSpace"] = whiteSpace;
  exports["anyDigit"] = anyDigit;
  exports["anyChar"] = anyChar;
  exports["eof"] = eof;
  exports["char"] = $$char;
  exports["satisfy"] = satisfy;
  exports["try"] = $$try;
  exports["fix"] = fix;
  exports["many1"] = many1;
  exports["many"] = many;
  exports["fail"] = fail;
  exports["unParser"] = unParser;
  exports["showParseError"] = showParseError;
  exports["functorParser"] = functorParser;
  exports["applyParser"] = applyParser;
  exports["applicativeParser"] = applicativeParser;
  exports["altParser"] = altParser;
  exports["bindParser"] = bindParser;;
 
})(PS["Verne.Utils.Parsing"] = PS["Verne.Utils.Parsing"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Array = PS["Data.Array"];
  var Data_Generic = PS["Data.Generic"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Either = PS["Data.Either"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Foreign_Class = PS["Data.Foreign.Class"];
  var Data_String = PS["Data.String"];
  var Data_List = PS["Data.List"];
  var Prelude = PS["Prelude"];
  var Verne_Utils_Parsing = PS["Verne.Utils.Parsing"];
  var Data_Unfoldable = PS["Data.Unfoldable"];     
  var Type = (function () {
      function Type(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Type.create = function (value0) {
          return function (value1) {
              return new Type(value0, value1);
          };
      };
      return Type;
  })();
  var TCon = (function () {
      function TCon(value0) {
          this.value0 = value0;
      };
      TCon.create = function (value0) {
          return new TCon(value0);
      };
      return TCon;
  })();
  var TNil = (function () {
      function TNil() {

      };
      TNil.value = new TNil();
      return TNil;
  })();
  var typeToArr = function (v) {
      if (v instanceof Type) {
          return Data_Array[":"](v.value0)(typeToArr(v.value1));
      };
      return [ v ];
  };
  var typeShow = new Prelude.Show(function (v) {
      if (v instanceof TCon) {
          return v.value0;
      };
      if (v instanceof Type) {
          return Prelude.show(typeShow)(v.value0) + (" -> " + Prelude.show(typeShow)(v.value1));
      };
      if (v instanceof TNil) {
          return "()";
      };
      throw new Error("Failed pattern match: " + [ v.constructor.name ]);
  });
  var typeLength = function (v) {
      if (v instanceof Type) {
          return 1 + typeLength(v.value1) | 0;
      };
      return 1;
  };
  var typeFromArr = function (arr) {
      var $24 = Data_Array.uncons(arr);
      if ($24 instanceof Data_Maybe.Just && $24.value0.tail.length === 0) {
          return $24.value0.head;
      };
      if ($24 instanceof Data_Maybe.Just) {
          return new Type($24.value0.head, typeFromArr($24.value0.tail));
      };
      if ($24 instanceof Data_Maybe.Nothing) {
          return TNil.value;
      };
      throw new Error("Failed pattern match: " + [ $24.constructor.name ]);
  };
  var parseType = (function () {
      var toStr = function ($54) {
          return Data_String.fromCharArray(Data_List.fromList(Data_Unfoldable.unfoldableArray)($54));
      };
      var rec = Verne_Utils_Parsing.fix(function (v) {
          return Control_Apply["*>"](Verne_Utils_Parsing.applyParser)(Verne_Utils_Parsing["try"](Control_Apply["*>"](Verne_Utils_Parsing.applyParser)(Verne_Utils_Parsing["char"]("-"))(Verne_Utils_Parsing["char"](">"))))(parseType);
      });
      var parseCon = Prelude["<$>"](Verne_Utils_Parsing.functorParser)(toStr)(Prelude["<*>"](Verne_Utils_Parsing.applyParser)(Prelude["<$>"](Verne_Utils_Parsing.functorParser)(Data_List.Cons.create)(Verne_Utils_Parsing.upperCaseChar))(Verne_Utils_Parsing.many(Verne_Utils_Parsing.alphaNum)));
      return Prelude.bind(Verne_Utils_Parsing.bindParser)(Verne_Utils_Parsing.skipSpaces)(function () {
          return Prelude.bind(Verne_Utils_Parsing.bindParser)(Prelude["<$>"](Verne_Utils_Parsing.functorParser)(TCon.create)(parseCon))(function (v) {
              return Prelude.bind(Verne_Utils_Parsing.bindParser)(Verne_Utils_Parsing.skipSpaces)(function () {
                  return Control_Alt["<|>"](Verne_Utils_Parsing.altParser)(Prelude["<$>"](Verne_Utils_Parsing.functorParser)(Type.create(v))(rec))(Control_Apply["*>"](Verne_Utils_Parsing.applyParser)(Verne_Utils_Parsing.eof)(Prelude.pure(Verne_Utils_Parsing.applicativeParser)(v)));
              });
          });
      });
  })();
  var typeIsForeign = new Data_Foreign_Class.IsForeign(function (fo) {
      return Prelude[">>="](Data_Either.bindEither)(Data_Foreign_Class.read(Data_Foreign_Class.stringIsForeign)(fo))(function (str) {
          return Verne_Utils_Parsing.unParser(parseType)({
              str: str, 
              pos: 0
          })(function (v) {
              return function (err) {
                  return Data_Either.Left.create(Data_Foreign.JSONError.create(Prelude.show(Verne_Utils_Parsing.showParseError)(err)));
              };
          })(function (typ) {
              return function (v) {
                  return new Data_Either.Right(typ);
              };
          });
      });
  });
  var genericType = new Data_Generic.Generic(function ($dollarx) {
      if ($dollarx instanceof Data_Generic.SProd && ($dollarx.value0 === "Verne.Data.Type.Type" && $dollarx.value1.length === 2)) {
          return Prelude.apply(Data_Maybe.applyMaybe)(Prelude.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(Type.create))(Data_Generic.fromSpine(genericType)($dollarx.value1[0](Prelude.unit))))(Data_Generic.fromSpine(genericType)($dollarx.value1[1](Prelude.unit)));
      };
      if ($dollarx instanceof Data_Generic.SProd && ($dollarx.value0 === "Verne.Data.Type.TCon" && $dollarx.value1.length === 1)) {
          return Prelude.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(TCon.create))(Data_Generic.fromSpine(Data_Generic.genericString)($dollarx.value1[0](Prelude.unit)));
      };
      if ($dollarx instanceof Data_Generic.SProd && ($dollarx.value0 === "Verne.Data.Type.TNil" && $dollarx.value1.length === 0)) {
          return new Data_Maybe.Just(TNil.value);
      };
      return Data_Maybe.Nothing.value;
  }, function ($dollarq) {
      return new Data_Generic.SigProd("Verne.Data.Type.Type", [ {
          sigConstructor: "Verne.Data.Type.Type", 
          sigValues: [ function ($dollarq1) {
              return Data_Generic.toSignature(genericType)(Data_Generic.anyProxy);
          }, function ($dollarq1) {
              return Data_Generic.toSignature(genericType)(Data_Generic.anyProxy);
          } ]
      }, {
          sigConstructor: "Verne.Data.Type.TCon", 
          sigValues: [ function ($dollarq1) {
              return Data_Generic.toSignature(Data_Generic.genericString)(Data_Generic.anyProxy);
          } ]
      }, {
          sigConstructor: "Verne.Data.Type.TNil", 
          sigValues: [  ]
      } ]);
  }, function ($dollarx) {
      if ($dollarx instanceof Type) {
          return new Data_Generic.SProd("Verne.Data.Type.Type", [ function ($dollarq) {
              return Data_Generic.toSpine(genericType)($dollarx.value0);
          }, function ($dollarq) {
              return Data_Generic.toSpine(genericType)($dollarx.value1);
          } ]);
      };
      if ($dollarx instanceof TCon) {
          return new Data_Generic.SProd("Verne.Data.Type.TCon", [ function ($dollarq) {
              return Data_Generic.toSpine(Data_Generic.genericString)($dollarx.value0);
          } ]);
      };
      if ($dollarx instanceof TNil) {
          return new Data_Generic.SProd("Verne.Data.Type.TNil", [  ]);
      };
      throw new Error("Failed pattern match: " + [ $dollarx.constructor.name ]);
  });
  var eqType = new Prelude.Eq(Data_Generic.gEq(genericType));
  var getNextArgument = function (expected) {
      return function (actual) {
          var expArr = typeToArr(expected);
          var actArr = typeToArr(actual);
          var diff = Data_Array.length(actArr) - Data_Array.length(expArr);
          var $49 = diff > 0 && Prelude["=="](Prelude.eqArray(eqType))(Data_Array.drop(diff)(actArr))(expArr);
          if ($49) {
              return new Data_Maybe.Just(typeFromArr(Data_Array.take(1)(actArr)));
          };
          if (!$49) {
              return Data_Maybe.Nothing.value;
          };
          throw new Error("Failed pattern match at Verne.Data.Type line 43, column 1 - line 44, column 1: " + [ $49.constructor.name ]);
      };
  };
  var typeEndsWith = function (v) {
      return function (t2) {
          if (v instanceof Type) {
              return Prelude["=="](eqType)(v)(t2) || typeEndsWith(v.value1)(t2);
          };
          return Prelude["=="](eqType)(v)(t2);
      };
  };
  exports["Type"] = Type;
  exports["TCon"] = TCon;
  exports["TNil"] = TNil;
  exports["parseType"] = parseType;
  exports["getNextArgument"] = getNextArgument;
  exports["typeEndsWith"] = typeEndsWith;
  exports["typeFromArr"] = typeFromArr;
  exports["typeToArr"] = typeToArr;
  exports["typeLength"] = typeLength;
  exports["genericType"] = genericType;
  exports["eqType"] = eqType;
  exports["typeIsForeign"] = typeIsForeign;
  exports["typeShow"] = typeShow;;
 
})(PS["Verne.Data.Type"] = PS["Verne.Data.Type"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Verne.Utils

  exports.infinity = Infinity;

  exports.dump = function(v) { return v + "" };    

  exports.hashOne = function(s) { return exports.hashMany([s]) };      

  /*
 * Hash an array in a non collidable way
 */  
  exports.hashMany = function(args) {
      var cryptoJs = require('crypto-js');
      var s = cryptoJs.SHA256();
      s.extend(arguments.length.toString());
      args.forEach(function(part) { s.extend(part) });
      args.forEach(function(part) {
          s.extend('|');
          s.extend(part.length);
      });
      return s.toString();
  } 
 
})(PS["Verne.Utils"] = PS["Verne.Utils"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Verne.Utils"];
  var Data_Foreign = PS["Data.Foreign"];
  var Prelude = PS["Prelude"];
  exports["hashMany"] = $foreign.hashMany;
  exports["hashOne"] = $foreign.hashOne;
  exports["dump"] = $foreign.dump;
  exports["infinity"] = $foreign.infinity;;
 
})(PS["Verne.Utils"] = PS["Verne.Utils"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Verne_Utils = PS["Verne.Utils"];
  var Prelude = PS["Prelude"];     
  var Hashable = function (hash) {
      this.hash = hash;
  };
  var hashString = new Hashable(Verne_Utils.hashOne);
  var hash = function (dict) {
      return dict.hash;
  };
  var hashArray = function (dictHashable) {
      return new Hashable(function ($2) {
          return Verne_Utils.hashMany(Prelude.map(Prelude.functorArray)(hash(dictHashable))($2));
      });
  };
  exports["Hashable"] = Hashable;
  exports["hash"] = hash;
  exports["hashString"] = hashString;
  exports["hashArray"] = hashArray;;
 
})(PS["Verne.Data.Hashable"] = PS["Verne.Data.Hashable"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Data_Array = PS["Data.Array"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Foreign_Class = PS["Data.Foreign.Class"];
  var Data_Foreign_NullOrUndefined = PS["Data.Foreign.NullOrUndefined"];
  var Data_Maybe = PS["Data.Maybe"];
  var Verne_Data_Type = PS["Verne.Data.Type"];
  var Verne_Data_Hashable = PS["Verne.Data.Hashable"];
  var Verne_Utils = PS["Verne.Utils"];
  var Prelude = PS["Prelude"];
  var Data_Either = PS["Data.Either"];
  var Data_Foreign_Index = PS["Data.Foreign.Index"];
  var valuePart = function (dictHashable) {
      return function (typ) {
          return function (value) {
              return {
                  id: Verne_Data_Hashable.hash(dictHashable)(value), 
                  name: Verne_Utils.dump(value), 
                  type: typ, 
                  exec: Data_Foreign.toForeign(function (v) {
                      return value;
                  }), 
                  autocomplete: Data_Maybe.Nothing.value, 
                  args: [  ]
              };
          };
      };
  };
  var partIsForeign = new Data_Foreign_Class.IsForeign(function (fo) {
      return Prelude.bind(Data_Either.bindEither)(Data_Foreign_Class.readProp(Data_Foreign_Class.stringIsForeign)(Data_Foreign_Index.indexString)("name")(fo))(function (v) {
          return Prelude.bind(Data_Either.bindEither)(Data_Foreign_Class.readProp(Verne_Data_Type.typeIsForeign)(Data_Foreign_Index.indexString)("type")(fo))(function (v1) {
              return Prelude.bind(Data_Either.bindEither)(Data_Foreign_Class.readProp(Data_Foreign_Class.foreignIsForeign)(Data_Foreign_Index.indexString)("exec")(fo))(function (v2) {
                  return Prelude.bind(Data_Either.bindEither)(Prelude["<$>"](Data_Either.functorEither)(Data_Foreign_NullOrUndefined.runNullOrUndefined)(Data_Foreign_Class.readProp(Data_Foreign_Class.nullOrUndefinedIsForeign(Data_Foreign_Class.foreignIsForeign))(Data_Foreign_Index.indexString)("autocomplete")(fo)))(function (v3) {
                      return Prelude.pure(Data_Either.applicativeEither)({
                          id: "", 
                          name: v, 
                          type: v1, 
                          exec: v2, 
                          autocomplete: v3, 
                          args: [  ]
                      });
                  });
              });
          });
      });
  });
  var hashPart = new Verne_Data_Hashable.Hashable(function (v) {
      return v.id;
  });
  var unsafeCurryPart = function (v) {
      return function (arg) {
          if (v.type instanceof Verne_Data_Type.Type) {
              return {
                  id: Verne_Data_Hashable.hash(Verne_Data_Hashable.hashArray(hashPart))([ v, arg ]), 
                  name: "", 
                  type: v.type.value1, 
                  exec: v.exec, 
                  autocomplete: v.autocomplete, 
                  args: Data_Array.snoc(v.args)(arg)
              };
          };
          throw new Error("Failed pattern match at Verne.Data.Part line 84, column 1 - line 85, column 1: " + [ v.constructor.name, arg.constructor.name ]);
      };
  };
  exports["valuePart"] = valuePart;
  exports["unsafeCurryPart"] = unsafeCurryPart;
  exports["partIsForeign"] = partIsForeign;
  exports["hashPart"] = hashPart;;
 
})(PS["Verne.Data.Part"] = PS["Verne.Data.Part"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Control_Monad_Except = PS["Control.Monad.Except"];
  var Data_Array = PS["Data.Array"];
  var Data_Either = PS["Data.Either"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_String = PS["Data.String"];
  var Data_Traversable = PS["Data.Traversable"];
  var Prelude = PS["Prelude"];
  var Verne_Data_Type = PS["Verne.Data.Type"];
  var Verne_Data_Part = PS["Verne.Data.Part"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Data_Identity = PS["Data.Identity"];     
  var Syntax = (function () {
      function Syntax(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Syntax.create = function (value0) {
          return function (value1) {
              return new Syntax(value0, value1);
          };
      };
      return Syntax;
  })();
  var Name = (function () {
      function Name(value0) {
          this.value0 = value0;
      };
      Name.create = function (value0) {
          return new Name(value0);
      };
      return Name;
  })();
  var Str = (function () {
      function Str(value0) {
          this.value0 = value0;
      };
      Str.create = function (value0) {
          return new Str(value0);
      };
      return Str;
  })();
  var Posi = (function () {
      function Posi(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Posi.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Posi(value0, value1, value2);
              };
          };
      };
      return Posi;
  })();
  var Code = (function () {
      function Code(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Code.create = function (value0) {
          return function (value1) {
              return new Code(value0, value1);
          };
      };
      return Code;
  })();
  var Atom = (function () {
      function Atom(value0) {
          this.value0 = value0;
      };
      Atom.create = function (value0) {
          return new Atom(value0);
      };
      return Atom;
  })();
  var Undefined = (function () {
      function Undefined(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Undefined.create = function (value0) {
          return function (value1) {
              return new Undefined(value0, value1);
          };
      };
      return Undefined;
  })();
  var NeedsArgument = (function () {
      function NeedsArgument(value0) {
          this.value0 = value0;
      };
      NeedsArgument.create = function (value0) {
          return new NeedsArgument(value0);
      };
      return NeedsArgument;
  })();
  var TooManyArguments = (function () {
      function TooManyArguments(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TooManyArguments.create = function (value0) {
          return function (value1) {
              return new TooManyArguments(value0, value1);
          };
      };
      return TooManyArguments;
  })();
  var $$TypeError = (function () {
      function TypeError(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TypeError.create = function (value0) {
          return function (value1) {
              return new TypeError(value0, value1);
          };
      };
      return TypeError;
  })();
  var Posc = (function () {
      function Posc(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Posc.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Posc(value0, value1, value2);
              };
          };
      };
      return Posc;
  })();
  var Executable = function (x) {
      return x;
  }; 
  var showCodeError = function (v) {
      if (v instanceof Undefined) {
          return "name '" + (v.value0 + "' is undefined");
      };
      if (v instanceof $$TypeError) {
          return "expecting type " + (Prelude.show(Verne_Data_Type.typeShow)(v.value0) + (" but found " + Prelude.show(Verne_Data_Type.typeShow)(v.value1)));
      };
      if (v instanceof Posc) {
          return "at " + (Prelude.show(Prelude.showInt)(v.value0) + (":" + (Prelude.show(Prelude.showInt)(v.value1) + (": " + showCodeError(v.value2)))));
      };
      throw new Error("Failed pattern match: " + [ v.constructor.name ]);
  };
  var toExecutable = function (code) {
      var go = function (v) {
          if (v instanceof Atom) {
              return Prelude.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.applicativeIdentity))(v);
          };
          if (v instanceof Code) {
              return Prelude["<*>"](Control_Monad_Except_Trans.applyExceptT(Data_Identity.applyIdentity))(Prelude["<$>"](Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(Code.create)(go(v.value0)))(Data_Traversable.traverse(Data_Traversable.traversableArray)(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.applicativeIdentity))(go)(v.value1));
          };
          if (v instanceof Posc) {
              return Prelude["<$>"](Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(Posc.create(v.value0)(v.value1))(go(v.value2));
          };
          return Control_Monad_Except.except(new Data_Either.Left(showCodeError(v)));
      };
      return Control_Monad_Except.runExcept(Prelude["<$>"](Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(Executable)(go(code)));
  };
  var getCompletion = function (caret) {
      var inside = function (a) {
          return function (b) {
              return function (act) {
                  var $28 = caret >= a && caret <= b;
                  if ($28) {
                      return act;
                  };
                  if (!$28) {
                      return Data_Maybe.Nothing.value;
                  };
                  throw new Error("Failed pattern match at Verne.Data.Code line 95, column 3 - line 99, column 1: " + [ $28.constructor.name ]);
              };
          };
      };
      var go = function (v) {
          if (v instanceof Posc && v.value2 instanceof Code) {
              return inside(v.value0)(v.value1)(Data_Array.head(Data_Array.mapMaybe(go)(Data_Array[":"](v.value2.value0)(v.value2.value1))));
          };
          if (v instanceof Posc && (v.value2 instanceof Atom && v.value2.value0.autocomplete instanceof Data_Maybe.Just)) {
              return inside(v.value0)(v.value1)(new Data_Maybe.Just(v));
          };
          if (v instanceof Posc && v.value2 instanceof Undefined) {
              return inside(v.value0)(v.value1)(new Data_Maybe.Just(v));
          };
          if (v instanceof Posc && v.value2 instanceof NeedsArgument) {
              return inside(v.value0)(v.value1)(new Data_Maybe.Just(v));
          };
          return Data_Maybe.Nothing.value;
      };
      return go;
  };
  var codeErrors = function (v) {
      if (v instanceof Posc && v.value2 instanceof Atom) {
          return [  ];
      };
      if (v instanceof Posc && v.value2 instanceof Code) {
          return Prelude["++"](Prelude.semigroupArray)(codeErrors(v.value2.value0))(Prelude[">>="](Prelude.bindArray)(v.value2.value1)(codeErrors));
      };
      if (v instanceof Posc) {
          return [ v ];
      };
      throw new Error("Failed pattern match: " + [ v.constructor.name ]);
  };
  exports["Syntax"] = Syntax;
  exports["Name"] = Name;
  exports["Str"] = Str;
  exports["Posi"] = Posi;
  exports["Executable"] = Executable;
  exports["Code"] = Code;
  exports["Atom"] = Atom;
  exports["Undefined"] = Undefined;
  exports["NeedsArgument"] = NeedsArgument;
  exports["TooManyArguments"] = TooManyArguments;
  exports["TypeError"] = $$TypeError;
  exports["Posc"] = Posc;
  exports["toExecutable"] = toExecutable;
  exports["showCodeError"] = showCodeError;
  exports["getCompletion"] = getCompletion;
  exports["codeErrors"] = codeErrors;;
 
})(PS["Verne.Data.Code"] = PS["Verne.Data.Code"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Control_Monad_State = PS["Control.Monad.State"];
  var Data_Array = PS["Data.Array"];
  var Data_List = PS["Data.List"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_String = PS["Data.String"];
  var Data_StrMap = PS["Data.StrMap"];
  var Data_Tuple = PS["Data.Tuple"];
  var Verne_Data_Code = PS["Verne.Data.Code"];
  var Verne_Data_Part = PS["Verne.Data.Part"];
  var Verne_Data_Type = PS["Verne.Data.Type"];
  var Verne_Data_Hashable = PS["Verne.Data.Hashable"];
  var Prelude = PS["Prelude"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_State_Trans = PS["Control.Monad.State.Trans"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Monoid = PS["Data.Monoid"];     
  var Ps = function (x) {
      return x;
  };
  var searchNames = function (match) {
      var go = function (a) {
          return function (b) {
              var $2 = match(a)(b);
              if ($2) {
                  return [ {
                      name: a, 
                      part: b
                  } ];
              };
              if (!$2) {
                  return [  ];
              };
              throw new Error("Failed pattern match at Verne.Data.Program line 51, column 7 - line 52, column 4: " + [ $2.constructor.name ]);
          };
      };
      return Control_Monad_State_Class.gets(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))(function (v) {
          return Data_StrMap.foldMap(Data_Monoid.monoidArray)(go)(v.globals);
      });
  };
  var getNameCompletions = function (pref) {
      return function (typ) {
          return searchNames(function (name) {
              return function (v) {
                  return pref === Data_String.take(Data_String.length(pref))(name) && Verne_Data_Type.typeEndsWith(v.type)(typ);
              };
          });
      };
  };
  exports["Ps"] = Ps;
  exports["searchNames"] = searchNames;
  exports["getNameCompletions"] = getNameCompletions;;
 
})(PS["Verne.Data.Program"] = PS["Verne.Data.Program"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Data_Array = PS["Data.Array"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Traversable = PS["Data.Traversable"];
  var Prelude = PS["Prelude"];
  var Verne_Data_Code = PS["Verne.Data.Code"];
  var Verne_Data_Part = PS["Verne.Data.Part"];
  var Verne_Data_Program = PS["Verne.Data.Program"];
  var Verne_Data_Type = PS["Verne.Data.Type"];
  var Verne_Utils = PS["Verne.Utils"];
  var Control_Monad_State_Trans = PS["Control.Monad.State.Trans"];
  var Data_Identity = PS["Data.Identity"];
  var Data_StrMap = PS["Data.StrMap"];
  var Verne_Data_Hashable = PS["Verne.Data.Hashable"];     
  var deref = function (typ) {
      return function (name) {
          return function (act) {
              return Prelude.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(Prelude["<#>"](Control_Monad_State_Trans.functorStateT(Data_Identity.monadIdentity))(Control_Monad_State_Class.get(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity)))(function (v) {
                  return Data_StrMap.lookup(name)(v.globals);
              }))(function (v) {
                  if (v instanceof Data_Maybe.Just) {
                      return act(v.value0);
                  };
                  if (v instanceof Data_Maybe.Nothing) {
                      return Prelude.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(new Verne_Data_Code.Undefined(name, typ));
                  };
                  throw new Error("Failed pattern match at Verne.Compiler line 73, column 1 - line 74, column 1: " + [ v.constructor.name ]);
              });
          };
      };
  };
  var checkType = function (t1) {
      return function (t2) {
          return function (act) {
              var $11 = Prelude["/="](Verne_Data_Type.eqType)(t1)(t2);
              if ($11) {
                  return Prelude.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(new Verne_Data_Code["TypeError"](t1, t2));
              };
              if (!$11) {
                  return act;
              };
              throw new Error("Failed pattern match at Verne.Compiler line 81, column 1 - line 82, column 1: " + [ $11.constructor.name ]);
          };
      };
  };
  var checkTooManyArgs = function (diff) {
      return function (args) {
          return function (act) {
              var $12 = diff < 1;
              if ($12) {
                  return act(args);
              };
              if (!$12) {
                  var keep = Data_Array.length(args) - diff;
                  return Prelude["<$>"](Control_Monad_State_Trans.functorStateT(Data_Identity.monadIdentity))(Verne_Data_Code.TooManyArguments.create(Data_Array.drop(keep)(args)))(act(Data_Array.take(keep)(args)));
              };
              throw new Error("Failed pattern match at Verne.Compiler line 85, column 1 - line 86, column 1: " + [ $12.constructor.name ]);
          };
      };
  };
  var addNeedsArgument = function (typ) {
      return function (v) {
          if (v instanceof Verne_Data_Code.Code) {
              var na = function (b) {
                  return new Verne_Data_Code.Posc(b + 1 | 0, Verne_Utils.infinity, new Verne_Data_Code.NeedsArgument(typ));
              };
              var $15 = Data_Maybe.maybe(v.value0)(Prelude.id(Prelude.categoryFn))(Data_Array.last(v.value1));
              if ($15 instanceof Verne_Data_Code.Posc) {
                  return new Verne_Data_Code.Code(v.value0, Data_Array.snoc(v.value1)(na($15.value1)));
              };
              throw new Error("Failed pattern match at Verne.Compiler line 93, column 1 - line 94, column 1: " + [ $15.constructor.name ]);
          };
          throw new Error("Failed pattern match at Verne.Compiler line 93, column 1 - line 94, column 1: " + [ typ.constructor.name, v.constructor.name ]);
      };
  };
  var go = function (v) {
      return function (v1) {
          if (v instanceof Verne_Data_Type.TCon && (v.value0 === "String" && v1 instanceof Verne_Data_Code.Str)) {
              return Prelude.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(Verne_Data_Code.Atom.create(Verne_Data_Part.valuePart(Verne_Data_Hashable.hashString)(v)(v1.value0)));
          };
          if (v instanceof Verne_Data_Type.TCon && v1 instanceof Verne_Data_Code.Str) {
              return deref(v)(v.value0)(function (part) {
                  if (part.type instanceof Verne_Data_Type.Type && (part.type.value0 instanceof Verne_Data_Type.TCon && (part.type.value0.value0 === "String" && part.type.value1 instanceof Verne_Data_Type.TCon))) {
                      return checkType(v)(new Verne_Data_Type.TCon(part.type.value1.value0))((function () {
                          var strPart = Verne_Data_Part.valuePart(Verne_Data_Hashable.hashString)(new Verne_Data_Type.TCon("String"))(v1.value0);
                          return Prelude.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(Verne_Data_Code.Atom.create(Verne_Data_Part.unsafeCurryPart(part)(strPart)));
                      })());
                  };
                  return Prelude.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(new Verne_Data_Code["TypeError"](v, new Verne_Data_Type.TCon("String")));
              });
          };
          if (v1 instanceof Verne_Data_Code.Name) {
              return deref(v)(v1.value0)(function (part) {
                  return checkType(v)(part.type)(Prelude.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(new Verne_Data_Code.Atom(part)));
              });
          };
          if (v1 instanceof Verne_Data_Code.Syntax && (v1.value0 instanceof Verne_Data_Code.Posi && v1.value0.value2 instanceof Verne_Data_Code.Name)) {
              return deref(v)(v1.value0.value2.value0)(function (func) {
                  var funcSig = Verne_Data_Type.typeToArr(func.type);
                  var nDiff = (Data_Array.length(v1.value1) + Verne_Data_Type.typeLength(v) | 0) - Data_Array.length(funcSig);
                  return checkTooManyArgs(nDiff)(v1.value1)(function (synArgs1) {
                      return Prelude.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(Data_Traversable.sequence(Data_Traversable.traversableArray)(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(Data_Array.zipWith(go)(funcSig)(synArgs1)))(function (v2) {
                          var nargs = Data_Array.length(synArgs1);
                          var code = new Verne_Data_Code.Code(new Verne_Data_Code.Posc(v1.value0.value0, v1.value0.value1, new Verne_Data_Code.Atom(func)), v2);
                          var actualType = Verne_Data_Type.typeFromArr(Data_Array.drop(nargs)(funcSig));
                          var $39 = Verne_Data_Type.getNextArgument(v)(actualType);
                          if ($39 instanceof Data_Maybe.Just) {
                              return Prelude.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(addNeedsArgument($39.value0)(code));
                          };
                          if ($39 instanceof Data_Maybe.Nothing) {
                              return checkType(v)(actualType)(Prelude.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(code));
                          };
                          throw new Error("Failed pattern match: " + [ $39.constructor.name ]);
                      });
                  });
              });
          };
          if (v1 instanceof Verne_Data_Code.Posi) {
              return Prelude["<$>"](Control_Monad_State_Trans.functorStateT(Data_Identity.monadIdentity))(Verne_Data_Code.Posc.create(v1.value0)(v1.value1))(go(v)(v1.value2));
          };
          throw new Error("Failed pattern match: " + [ v.constructor.name, v1.constructor.name ]);
      };
  };
  var compile = go(new Verne_Data_Type.TCon("Effect"));
  exports["compile"] = compile;;
 
})(PS["Verne.Compiler"] = PS["Verne.Compiler"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Verne.Exec

  var Left = PS['Data.Either'].Left;
  var Right = PS['Data.Either'].Right;

  var runPartInner = function(part, moreargs) {
      var args = part.args.map(runPartInner).concat(moreargs || []);
      return part.exec.apply(part, args);
  }

  exports.runPart = function(part, moreargs) {
      try {
          return new Right(runPartInner(part, moreargs));
      } catch (e) {
          return new Left(e);
      }
  };
 
})(PS["Verne.Exec"] = PS["Verne.Exec"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Verne.Exec"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Data_Either = PS["Data.Either"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Function = PS["Data.Function"];
  var Data_Traversable = PS["Data.Traversable"];
  var Prelude = PS["Prelude"];
  var Verne_Data_Code = PS["Verne.Data.Code"];
  var Verne_Data_Part = PS["Verne.Data.Part"];
  var Verne_Data_Program = PS["Verne.Data.Program"];
  var Control_Monad_State_Trans = PS["Control.Monad.State.Trans"];
  var Data_Identity = PS["Data.Identity"];     
  var execute = function (v) {
      var go = function (__copy_v1) {
          var v1 = __copy_v1;
          tco: while (true) {
              if (v1 instanceof Verne_Data_Code.Atom) {
                  return Control_Monad_Except_Trans.ExceptT(Prelude.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))($foreign.runPart(v1.value0, [  ])));
              };
              if (v1 instanceof Verne_Data_Code.Code && (v1.value0 instanceof Verne_Data_Code.Posc && v1.value0.value2 instanceof Verne_Data_Code.Atom)) {
                  return Prelude.bind(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Data_Traversable.traverse(Data_Traversable.traversableArray)(Control_Monad_Except_Trans.applicativeExceptT(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity)))(go)(v1.value1))(function (v2) {
                      return Control_Monad_Except_Trans.ExceptT(Prelude.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))($foreign.runPart(v1.value0.value2.value0, v2)));
                  });
              };
              if (v1 instanceof Verne_Data_Code.Posc) {
                  var __tco_v1 = v1.value2;
                  v1 = __tco_v1;
                  continue tco;
              };
              throw new Error("Failed pattern match at Verne.Exec line 18, column 1 - line 19, column 1: " + [ v1.constructor.name ]);
          };
      };
      return Control_Monad_Except_Trans.runExceptT(go(v));
  };
  exports["execute"] = execute;;
 
})(PS["Verne.Exec"] = PS["Verne.Exec"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Apply = PS["Control.Apply"];
  var Data_List = PS["Data.List"];
  var Data_Either = PS["Data.Either"];
  var Data_String = PS["Data.String"];
  var Prelude = PS["Prelude"];
  var Verne_Data_Code = PS["Verne.Data.Code"];
  var Verne_Utils = PS["Verne.Utils"];
  var Verne_Utils_Parsing = PS["Verne.Utils.Parsing"];
  var Data_Unfoldable = PS["Data.Unfoldable"];     
  var getPos = new Verne_Utils_Parsing.Parser(function (v) {
      return function (v1) {
          return function (sc) {
              return sc(v.pos)(v);
          };
      };
  });
  var parseName = (function () {
      var myAlphaNum = Verne_Utils_Parsing.satisfy(function (c) {
          return c >= "a" && c <= "z" || (c >= "A" && c <= "Z" || c >= "0" && c <= "9");
      });
      return Prelude.bind(Verne_Utils_Parsing.bindParser)(getPos)(function (v) {
          return Prelude.bind(Verne_Utils_Parsing.bindParser)(Prelude["<*>"](Verne_Utils_Parsing.applyParser)(Prelude["<$>"](Verne_Utils_Parsing.functorParser)(Data_List.Cons.create)(Verne_Utils_Parsing.lowerCaseChar))(Verne_Utils_Parsing.many(myAlphaNum)))(function (v1) {
              return Prelude.bind(Verne_Utils_Parsing.bindParser)(Control_Apply["<*"](Verne_Utils_Parsing.applyParser)(getPos)(Verne_Utils_Parsing.skipSpaces))(function (v2) {
                  return Prelude.pure(Verne_Utils_Parsing.applicativeParser)(Verne_Data_Code.Posi.create(v)(v2)(Verne_Data_Code.Name.create(Data_String.fromCharArray(Data_List.fromList(Data_Unfoldable.unfoldableArray)(v1)))));
              });
          });
      });
  })();
  var parseString = Prelude.bind(Verne_Utils_Parsing.bindParser)(getPos)(function (v) {
      return Prelude.bind(Verne_Utils_Parsing.bindParser)(Verne_Utils_Parsing["char"]("\""))(function () {
          return Prelude.bind(Verne_Utils_Parsing.bindParser)(Verne_Utils_Parsing.many(Verne_Utils_Parsing.satisfy(function (v1) {
              return v1 !== "\"";
          })))(function (v1) {
              return Prelude.bind(Verne_Utils_Parsing.bindParser)(Control_Alt["<|>"](Verne_Utils_Parsing.altParser)(Control_Apply["*>"](Verne_Utils_Parsing.applyParser)(Verne_Utils_Parsing.eof)(Prelude.pure(Verne_Utils_Parsing.applicativeParser)(Verne_Utils.infinity)))(Control_Apply["*>"](Verne_Utils_Parsing.applyParser)(Verne_Utils_Parsing["char"]("\""))(getPos)))(function (v2) {
                  return Prelude.pure(Verne_Utils_Parsing.applicativeParser)(Verne_Data_Code.Posi.create(v)(v2)(Verne_Data_Code.Str.create(Data_String.fromCharArray(Data_List.fromList(Data_Unfoldable.unfoldableArray)(v1)))));
              });
          });
      });
  });
  var parseParens = Verne_Utils_Parsing.fix(function (v) {
      return Prelude.bind(Verne_Utils_Parsing.bindParser)(Control_Apply["<*"](Verne_Utils_Parsing.applyParser)(Control_Apply["<*"](Verne_Utils_Parsing.applyParser)(getPos)(Verne_Utils_Parsing["char"]("(")))(Verne_Utils_Parsing.skipSpaces))(function (v1) {
          return Prelude.bind(Verne_Utils_Parsing.bindParser)(Control_Apply["<*"](Verne_Utils_Parsing.applyParser)(parseArg)(Verne_Utils_Parsing.skipSpaces))(function (v2) {
              return Prelude.bind(Verne_Utils_Parsing.bindParser)(Control_Apply["<*"](Verne_Utils_Parsing.applyParser)(parseArgs)(Verne_Utils_Parsing.skipSpaces))(function (v3) {
                  return Prelude.bind(Verne_Utils_Parsing.bindParser)(Control_Alt["<|>"](Verne_Utils_Parsing.altParser)(Control_Apply["*>"](Verne_Utils_Parsing.applyParser)(Verne_Utils_Parsing.eof)(Prelude.pure(Verne_Utils_Parsing.applicativeParser)(Verne_Utils.infinity)))(Control_Apply["*>"](Verne_Utils_Parsing.applyParser)(Verne_Utils_Parsing["char"](")"))(getPos)))(function (v4) {
                      return Prelude.pure(Verne_Utils_Parsing.applicativeParser)(Verne_Data_Code.Posi.create(v1)(v4)(new Verne_Data_Code.Syntax(v2, v3)));
                  });
              });
          });
      });
  });
  var parseArgs = Verne_Utils_Parsing.fix(function (v) {
      return Prelude["<$>"](Verne_Utils_Parsing.functorParser)(Data_List.fromList(Data_Unfoldable.unfoldableArray))(Verne_Utils_Parsing.many(Control_Apply["<*"](Verne_Utils_Parsing.applyParser)(parseArg)(Verne_Utils_Parsing.skipSpaces)));
  });
  var parseArg = Verne_Utils_Parsing.fix(function (v) {
      return Control_Alt["<|>"](Verne_Utils_Parsing.altParser)(Control_Alt["<|>"](Verne_Utils_Parsing.altParser)(parseParens)(parseName))(parseString);
  });
  var parseSyntax = (function () {
      var thePos = Prelude["<*>"](Verne_Utils_Parsing.applyParser)(Prelude["<$>"](Verne_Utils_Parsing.functorParser)(Verne_Data_Code.Posi.create)(getPos))(Prelude.pure(Verne_Utils_Parsing.applicativeParser)(Verne_Utils.infinity));
      return Prelude["<*>"](Verne_Utils_Parsing.applyParser)(thePos)(Prelude["<*>"](Verne_Utils_Parsing.applyParser)(Prelude["<$>"](Verne_Utils_Parsing.functorParser)(Verne_Data_Code.Syntax.create)(parseArg))(parseArgs));
  })();
  var parse = function (input) {
      var parser = Control_Apply["<*"](Verne_Utils_Parsing.applyParser)(parseSyntax)(Verne_Utils_Parsing.eof);
      var onSuccess = function (ast) {
          return function (v) {
              return new Data_Either.Right(ast);
          };
      };
      var onErr = function (pos) {
          return function (error) {
              return new Data_Either.Left({
                  pos: pos, 
                  error: error
              });
          };
      };
      return Verne_Utils_Parsing.unParser(parser)({
          str: input, 
          pos: 0
      })(onErr)(onSuccess);
  };
  exports["parse"] = parse;;
 
})(PS["Verne.Parser"] = PS["Verne.Parser"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Verne.Program


  exports.make = function(ps) {
      var DC = PS['Verne.Data.Code'];
      var DT = PS['Verne.Data.Type'];
      var m = function(val) { return val.value0; }
      var e = function(val) {
          return val instanceof PS['Data.Either'].Left ? 
              {left: val.value0} : {right: val.value0};
      };
      var ex = function(val) {
          if (val instanceof PS['Data.Either'].Left) {
              throw val.value0;
          } else {
              return val.value0;
          }
      };

      var Code = function(program, str) {
          this.program = program;
          this.str = str;
          this.syntax = ex(ps.parse(str));
          this.code = program.run(ps.compile(this.syntax));
      }
      Code.prototype = {
          execute: function() {
              var exe = ex(ps.toExecutable(this.code));
              return ps.execute(exe);
          },
          getCompletion: function(caret) {
              var code = m(ps.getCompletion(caret)(this.code));
              if (!code) return;
              var completion = {
                  a: code.value0,
                  b: code.value1
              };
              code = code.value2;
              if (code instanceof DC.Undefined) {
                  var gnc = ps.getNameCompletions(code.value0)(code.value1)
                  completion.names = this.program.run(gnc);
              } else if (code instanceof DC.Atom) {
                  completion.part = code.value0;
              } else if (code instanceof DC.NeedsArgument) {
                  var gnc = ps.getNameCompletions("")(code.value0)
                  completion.names = this.program.run(gnc);
              } else {
                  console.log('unrecognized completion', code);
                  return;
              }
              return completion;
          }
      }
    
      var Program = function() {
          this.state = ps.newProgramState;
      };
      Program.prototype = {
          run: function(act) {
              var tup = ps.runState(act)(this.state);
              this.state = tup.value1;
              return tup.value0;
          },
          addPart: function(object) {
              return ex(this.run(ps.addPart(object)));
          },
          compile: function(str) {
              return new Code(this, str);
          },
      };
      return Program;
  };
 
})(PS["Verne.Program"] = PS["Verne.Program"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Verne.Program"];
  var Control_Monad_State = PS["Control.Monad.State"];
  var Data_Either = PS["Data.Either"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Foreign_Class = PS["Data.Foreign.Class"];
  var Prelude = PS["Prelude"];
  var Verne_Data_Code = PS["Verne.Data.Code"];
  var Verne_Data_Part = PS["Verne.Data.Part"];
  var Verne_Data_Program = PS["Verne.Data.Program"];
  var Verne_Compiler = PS["Verne.Compiler"];
  var Verne_Exec = PS["Verne.Exec"];
  var Verne_Parser = PS["Verne.Parser"];
  var Data_StrMap = PS["Data.StrMap"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_State_Trans = PS["Control.Monad.State.Trans"];
  var Data_Identity = PS["Data.Identity"];     
  var newProgramState = {
      globals: Data_StrMap.empty, 
      modules: Data_StrMap.empty
  };
  var addPart = function (fo) {
      var mod = function (v) {
          return Control_Monad_State_Class.modify(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))(function (v1) {
              return Verne_Data_Program.Ps((function () {
                  var $4 = {};
                  for (var $5 in v1) {
                      if (v1.hasOwnProperty($5)) {
                          $4[$5] = v1[$5];
                      };
                  };
                  $4.globals = Data_StrMap.insert(v.name)(v)(v1.globals);
                  return $4;
              })());
          });
      };
      var $8 = Data_Foreign_Class.read(Verne_Data_Part.partIsForeign)(fo);
      if ($8 instanceof Data_Either.Right) {
          return Prelude["<$>"](Control_Monad_State_Trans.functorStateT(Data_Identity.monadIdentity))(Data_Either.Right.create)(mod($8.value0));
      };
      if ($8 instanceof Data_Either.Left) {
          return Prelude.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(new Data_Either.Left($8.value0));
      };
      throw new Error("Failed pattern match at Verne.Program line 26, column 1 - line 27, column 1: " + [ $8.constructor.name ]);
  };
  var program = $foreign.make({
      newProgramState: newProgramState, 
      addPart: addPart, 
      parse: Verne_Parser.parse, 
      compile: Verne_Compiler.compile, 
      toExecutable: Verne_Data_Code.toExecutable, 
      execute: Verne_Exec.execute, 
      runState: Control_Monad_State.runState, 
      showCodeError: Verne_Data_Code.showCodeError, 
      codeErrors: Verne_Data_Code.codeErrors, 
      getCompletion: Verne_Data_Code.getCompletion, 
      getNameCompletions: Verne_Data_Program.getNameCompletions
  });
  exports["program"] = program;;
 
})(PS["Verne.Program"] = PS["Verne.Program"] || {});

PS["Main"].main();
module.exports = PS;
