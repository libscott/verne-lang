module Verne.Namespace where

-- import Prelude
-- 
-- import Data.Array.Unsafe (head)
-- import Data.Either
-- import Data.Foreign
-- import Data.Foreign.Class
-- import Data.Maybe
-- import qualified Data.Map as Map
-- 
-- import Verne.Types.Component
-- import Verne.Types.Program
-- 
-- 
-- empty :: Namespace
-- empty = Namespace Map.empty Map.empty
-- 
-- 
-- componentByName :: String -> Namespace -> Maybe Component
-- componentByName ident (Namespace byName _) = Map.lookup ident byName
-- 
-- 
-- componentsByTypeHead :: Type -> Namespace -> Array Component
-- componentsByTypeHead typ (Namespace _ byTypeHead) =
--     maybe [] id (Map.lookup typ byTypeHead)
-- 
-- 
-- addComponent :: Foreign -> Namespace -> Either String Namespace
-- addComponent fo ns =
--   let ef = addComponent' <$> readProp "name" fo <*> read fo
--    in case ef of
--          Left err -> Left ("Error importing component: " ++ show err)
--          Right f  -> f ns
-- 
-- 
-- addComponent' :: String -> Component -> Namespace -> Either String Namespace
-- addComponent' name comp@(Component c) (Namespace byName byTH) =
--     if Map.member name byName
--        then Left "Already registered"
--        else let addition = Map.singleton (head c.signature) [comp]
--                 union = Map.unionWith (++) addition byTH
--             in Right (Namespace (Map.insert name comp byName) union)
-- 
